[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Science",
    "section": "",
    "text": "Building a Model Using Linear Regression for Car Price Prediction and Data Analysis\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nJul 29, 2024\n\n\nNeeraja Sai Magisetti\n\n\n\n\n\n\n\n\n\n\n\n\nReport on Iris Data\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nJul 16, 2024\n\n\nNeeraja Sai Magisetti\n\n\n\n\n\n\n\n\n\n\n\n\nReport on Wine Data\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nJul 16, 2024\n\n\nNeeraja Sai Magisetti\n\n\n\n\n\n\n\n\n\n\n\n\nNeeraja Sai Magisetti Resume\n\n\n\n\n\n\nresume\n\n\nprofile\n\n\nprojects\n\n\neducation\n\n\n\n\n\n\n\n\n\nJun 28, 2024\n\n\nNeeraja Sai Magisetti\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nJun 27, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJun 24, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About me",
    "section": "",
    "text": "Welcome to my blog! Here, I explore a variety of topics related to data science and software development. From detailed tutorials on linear regression and data visualization to insights on using Python libraries like pandas and scikit-learn, my goal is to provide valuable resources for both newcomers and seasoned professionals in the field.\nI also share updates and findings from my projects, including practical applications and lessons learned. Whether you’re here to enhance your skills or stay informed about the latest trends, you’ll find content designed to educate and inspire.\nThank you for visiting, and I hope you find the information here both useful and engaging!"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/Hello world/world.html",
    "href": "posts/Hello world/world.html",
    "title": "Hello World",
    "section": "",
    "text": "Hello World Page"
  },
  {
    "objectID": "posts/Resume/world.html",
    "href": "posts/Resume/world.html",
    "title": "Hello World",
    "section": "",
    "text": "Hello World Page"
  },
  {
    "objectID": "posts/Resume/CV.html",
    "href": "posts/Resume/CV.html",
    "title": "Neeraja Sai Magisetti Resume",
    "section": "",
    "text": "Python developers specialize in writing server-side web application logic using the Python programming language. They create clean, efficient, and manageable code, build backend products, and integrate user content. They manage data-related tasks such as data collection and analysis and create RESTful APIs. Knowledge of data and management systems is also important, as is a good familiarity with Python libraries and frameworks. Python developers need to have good problem-solving skills, attention to detail, and the ability to work independently and collaboratively.\n\n\n\n\nCertification on SQL in LinkedIn.\nCertification on Cloud Computing for IOT in LinkedIn.\nCertification on Cloud Security in LinkedIn.\n\n\n\n\n\n\n\nJacksonville State University\nGraduated in the top 5% of my class.\nGPA: 3.3\n\n\n\n\n\nLakireddy Balareddy Engineering College, Bapatla\nGPA: 3.0\n\n\n\n\n\n\n\nDocker containerization revolutionizes software delivery by providing secure, isolated environments for applications, ensuring portability across different platforms, and enhancing resource efficiency compared to virtual machines. It enables rapid scaling, fast development, and deployment cycles, and integrates seamlessly into CI/CD pipelines. This technology supports microservices architecture and fosters collaboration between development and operations teams, leading to more agile and reliable software delivery. Embracing Docker helps achieve greater efficiency and future-proofs applications in an evolving containerization landscape.\n\n\n\nThe main purpose of the proposed system is to allow the users that are managers, hosts, servers, busboys, and chefs to perform their responsibilities efficiently. This system will help managers to manage sales data, employee status, inventory data, and other administrative work. This will let the server lessen the burden of taking orders and sending them to the kitchen physically and running back and forth from the kitchen and table. It will allow the server to take orders and just send them to the chef without visiting the kitchen. The system allows the host to look at the status of the tables whether they are available or not.\n\n\n\n\nEmail: neerajasai.magisetti@gmail.com\nContact: +1 (256) 251-1244\nLinkedIn: https://www.linkedin.com/in/neeraja-sai-magisetti-6a2711279\n\n\n\n\nPython Programming\nC Programming\nPandas\nHTML\nSQL\nDBMS\nAWS\nDevOps\nNeural Networks\nData Structures\nLeadership Skills\nMicrosoft Office\nAgile Methodologies\n\n\n\n\n\nEnglish\nTelugu"
  },
  {
    "objectID": "posts/Resume/CV.html#profile",
    "href": "posts/Resume/CV.html#profile",
    "title": "Neeraja Sai Magisetti Resume",
    "section": "",
    "text": "Python developers specialize in writing server-side web application logic using the Python programming language. They create clean, efficient, and manageable code, build backend products, and integrate user content. They manage data-related tasks such as data collection and analysis and create RESTful APIs. Knowledge of data and management systems is also important, as is a good familiarity with Python libraries and frameworks. Python developers need to have good problem-solving skills, attention to detail, and the ability to work independently and collaboratively."
  },
  {
    "objectID": "posts/Resume/CV.html#certificates",
    "href": "posts/Resume/CV.html#certificates",
    "title": "Neeraja Sai Magisetti Resume",
    "section": "",
    "text": "Certification on SQL in LinkedIn.\nCertification on Cloud Computing for IOT in LinkedIn.\nCertification on Cloud Security in LinkedIn."
  },
  {
    "objectID": "posts/Resume/CV.html#education",
    "href": "posts/Resume/CV.html#education",
    "title": "Neeraja Sai Magisetti Resume",
    "section": "",
    "text": "Jacksonville State University\nGraduated in the top 5% of my class.\nGPA: 3.3\n\n\n\n\n\nLakireddy Balareddy Engineering College, Bapatla\nGPA: 3.0"
  },
  {
    "objectID": "posts/Resume/CV.html#projects",
    "href": "posts/Resume/CV.html#projects",
    "title": "Neeraja Sai Magisetti Resume",
    "section": "",
    "text": "Docker containerization revolutionizes software delivery by providing secure, isolated environments for applications, ensuring portability across different platforms, and enhancing resource efficiency compared to virtual machines. It enables rapid scaling, fast development, and deployment cycles, and integrates seamlessly into CI/CD pipelines. This technology supports microservices architecture and fosters collaboration between development and operations teams, leading to more agile and reliable software delivery. Embracing Docker helps achieve greater efficiency and future-proofs applications in an evolving containerization landscape.\n\n\n\nThe main purpose of the proposed system is to allow the users that are managers, hosts, servers, busboys, and chefs to perform their responsibilities efficiently. This system will help managers to manage sales data, employee status, inventory data, and other administrative work. This will let the server lessen the burden of taking orders and sending them to the kitchen physically and running back and forth from the kitchen and table. It will allow the server to take orders and just send them to the chef without visiting the kitchen. The system allows the host to look at the status of the tables whether they are available or not."
  },
  {
    "objectID": "posts/Resume/CV.html#details",
    "href": "posts/Resume/CV.html#details",
    "title": "Neeraja Sai Magisetti Resume",
    "section": "",
    "text": "Email: neerajasai.magisetti@gmail.com\nContact: +1 (256) 251-1244\nLinkedIn: https://www.linkedin.com/in/neeraja-sai-magisetti-6a2711279"
  },
  {
    "objectID": "posts/Resume/CV.html#skills",
    "href": "posts/Resume/CV.html#skills",
    "title": "Neeraja Sai Magisetti Resume",
    "section": "",
    "text": "Python Programming\nC Programming\nPandas\nHTML\nSQL\nDBMS\nAWS\nDevOps\nNeural Networks\nData Structures\nLeadership Skills\nMicrosoft Office\nAgile Methodologies"
  },
  {
    "objectID": "posts/Resume/CV.html#languages",
    "href": "posts/Resume/CV.html#languages",
    "title": "Neeraja Sai Magisetti Resume",
    "section": "",
    "text": "English\nTelugu"
  },
  {
    "objectID": "posts/ploting/sample.html",
    "href": "posts/ploting/sample.html",
    "title": "matplotlib demo",
    "section": "",
    "text": "For a demonstration of a line plot on a polar axis, see Figure 1.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\nFigure 1: A line plot on a polar axis"
  },
  {
    "objectID": "posts/ploting/histogram.html",
    "href": "posts/ploting/histogram.html",
    "title": "Ploting",
    "section": "",
    "text": "Code\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('iris.data', delimiter=',', engine='python' )\ndata.to_excel('iris.xlsx', index=False)\n    #print(data)\n\ndef statistics(data):\n        numeric_columns = data.select_dtypes(include=['number']).columns\n        #print(numeric_columns)\n        mean_value = data.mean(numeric_only= True)\n        median_value = data.median(numeric_only= True)\n        mode_value = data.mode().iloc[0]         \n        # Using f-strings to format the output\n        print(f\"Mean value for each column: \\n{mean_value}\")\n        print(\"---------------------\")\n        print(f\"Median value for each column: \\n{median_value}\")\n        print('---------------------')\n        print(f\"Mode value for each column: \\n{mode_value}\")     \n        for column in numeric_columns:\n            total_sum = data[column].sum()     \n            std_value = data[column].std()     \n            count_value = data[column].count()\n            max_value = data[column].max()\n            min_value = data[column].min()\n            print(\"-----------------\")\n            print(f\"Total sum of '{column}': {total_sum}\")\n            print(f\"Standard Deviation of '{column}': {std_value}\")\n            print(f\"Count value of '{column}': {count_value}\")\n            print(f\"Max Value of '{column}': {max_value}\")\n            print(f\"Min Value of '{column}': {min_value}\")\n        return mean_value, median_value, mode_value\n\nmean_value, median_value, mode_value = statistics(data)\n\n\nMean value for each column: \nsepal length    5.843333\nsepal width     3.054000\npetal length    3.758667\npetal width     1.198667\ndtype: float64\n---------------------\nMedian value for each column: \nsepal length    5.80\nsepal width     3.00\npetal length    4.35\npetal width     1.30\ndtype: float64\n---------------------\nMode value for each column: \nsepal length            5.0\nsepal width             3.0\npetal length            1.5\npetal width             0.2\nclass           Iris-setosa\nName: 0, dtype: object\n-----------------\nTotal sum of 'sepal length': 876.5\nStandard Deviation of 'sepal length': 0.828066127977863\nCount value of 'sepal length': 150\nMax Value of 'sepal length': 7.9\nMin Value of 'sepal length': 4.3\n-----------------\nTotal sum of 'sepal width': 458.1\nStandard Deviation of 'sepal width': 0.4335943113621737\nCount value of 'sepal width': 150\nMax Value of 'sepal width': 4.4\nMin Value of 'sepal width': 2.0\n-----------------\nTotal sum of 'petal length': 563.8\nStandard Deviation of 'petal length': 1.7644204199522626\nCount value of 'petal length': 150\nMax Value of 'petal length': 6.9\nMin Value of 'petal length': 1.0\n-----------------\nTotal sum of 'petal width': 179.8\nStandard Deviation of 'petal width': 0.7631607417008411\nCount value of 'petal width': 150\nMax Value of 'petal width': 2.5\nMin Value of 'petal width': 0.1"
  },
  {
    "objectID": "posts/ploting/histogram.html#profile",
    "href": "posts/ploting/histogram.html#profile",
    "title": "Ploting",
    "section": "",
    "text": "Code\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('iris.data', delimiter=',', engine='python' )\ndata.to_excel('iris.xlsx', index=False)\n    #print(data)\n\ndef statistics(data):\n        numeric_columns = data.select_dtypes(include=['number']).columns\n        #print(numeric_columns)\n        mean_value = data.mean(numeric_only= True)\n        median_value = data.median(numeric_only= True)\n        mode_value = data.mode().iloc[0]         \n        # Using f-strings to format the output\n        print(\"---------------------\")\n        print(f\"Mean value for each column: \\n{mean_value}\")\n        print(\"---------------------\")\n        print(f\"Median value for each column: \\n{median_value}\")\n        print('---------------------')\n        print(f\"Mode value for each column: \\n{mode_value}\")     \n        for column in numeric_columns:\n            total_sum = data[column].sum()     \n            std_value = data[column].std()     \n            count_value = data[column].count()\n            max_value = data[column].max()\n            min_value = data[column].min()\n            print(\"-----------------\")\n            print(f\"Total sum of '{column}': {total_sum}\")\n            print(f\"Standard Deviation of '{column}': {std_value}\")\n            print(f\"Count value of '{column}': {count_value}\")\n            print(f\"Max Value of '{column}': {max_value}\")\n            print(f\"Min Value of '{column}': {min_value}\")\n        return mean_value, median_value, mode_value\n\ndef histogram_plot(data):\n        # Select only numeric columns\n        numeric_columns = data.select_dtypes(include=['number']).columns\n        #print(numeric_columns)\n    \n        # Plot histogram for each numeric column\n        for column in numeric_columns:\n        #creates a new figure for the plot. Each time through the loop, a new figure is created to ensure that each histogram is plotted in its own separate window or plot.\n                plt.figure(figsize=(6, 6))\n                data[column].plot(kind='hist', bins=20, edgecolor='black')\n                plt.xlabel(column)\n                plt.ylabel('Frequency')\n                plt.title(f'Histogram of {column}')\n                plt.show()\ndef scatter_plot(data):\n    # Select only numeric columns\n    numeric_columns = data.select_dtypes(include=['number']).columns\n    colors = ['g','r']\n    # Create a color map\n    color_map = [colors[i % len(colors)] for i in range(len(data))]\n    for column1 in numeric_columns:\n        for column2 in numeric_columns:\n                if column1 != column2:\n                    plt.figure(figsize=(6, 6))\n                    plt.scatter(data[column1], data[column2], c=color_map, label='Data Points')\n                    plt.title(f\"Scatter Plot of: {column1} and {column2}\")\n                    plt.xlabel(column1)\n                    plt.ylabel(column2)\n                    plt.legend()\n                    plt.grid(True)\n                    plt.show()\n                    \n\ndef line_plot(data):\n    # Select only numeric columns\n    numeric_columns = data.select_dtypes(include=['number']).columns\n    # Plot histogram for each numeric column\n    for column in numeric_columns:\n        plt.figure(figsize=(6, 6))\n        numeric_data = data.select_dtypes(include='number')\n        #print(numeric_data) numeric_data.index,\n        plt.plot(numeric_data[column], color='green' , label=column, linestyle='-', marker='o')\n        plt.title('Line Plot')\n        plt.xlabel('Index')\n        plt.ylabel(column)\n        plt.legend()\n        plt.grid(True)\n        plt.show()\n\n\ndef box_plot(data):\n    # Select only numeric columns\n    numeric_columns = data.select_dtypes(include=['number']).columns\n    # Plot histogram for each numeric column\n    numeric_data = data.select_dtypes(include='number')\n    #print(numeric_data)\n    for column in numeric_columns:\n        plt.figure(figsize=(8, 8))\n        plt.boxplot(numeric_data[column])   #, tick_labels=numeric_columns\n        plt.title('Box Plot')\n        plt.xlabel(column)\n        plt.ylabel('Values')\n        plt.grid()\n        plt.show()\n\n\ndef main():\n    mean_value, median_value, mode_value = statistics(data)\n    histogram_plot(data)\n    scatter_plot(data)\n    line_plot(data)\n    box_plot(data)\n\n\n\nmain()\n\n\n---------------------\nMean value for each column: \nsepal length    5.843333\nsepal width     3.054000\npetal length    3.758667\npetal width     1.198667\ndtype: float64\n---------------------\nMedian value for each column: \nsepal length    5.80\nsepal width     3.00\npetal length    4.35\npetal width     1.30\ndtype: float64\n---------------------\nMode value for each column: \nsepal length            5.0\nsepal width             3.0\npetal length            1.5\npetal width             0.2\nclass           Iris-setosa\nName: 0, dtype: object\n-----------------\nTotal sum of 'sepal length': 876.5\nStandard Deviation of 'sepal length': 0.828066127977863\nCount value of 'sepal length': 150\nMax Value of 'sepal length': 7.9\nMin Value of 'sepal length': 4.3\n-----------------\nTotal sum of 'sepal width': 458.1\nStandard Deviation of 'sepal width': 0.4335943113621737\nCount value of 'sepal width': 150\nMax Value of 'sepal width': 4.4\nMin Value of 'sepal width': 2.0\n-----------------\nTotal sum of 'petal length': 563.8\nStandard Deviation of 'petal length': 1.7644204199522626\nCount value of 'petal length': 150\nMax Value of 'petal length': 6.9\nMin Value of 'petal length': 1.0\n-----------------\nTotal sum of 'petal width': 179.8\nStandard Deviation of 'petal width': 0.7631607417008411\nCount value of 'petal width': 150\nMax Value of 'petal width': 2.5\nMin Value of 'petal width': 0.1"
  },
  {
    "objectID": "posts/ploting/histogram.html#main-code",
    "href": "posts/ploting/histogram.html#main-code",
    "title": "Ploting",
    "section": "",
    "text": "Code\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('iris.data', delimiter=',', engine='python' )\ndata.to_excel('iris.xlsx', index=False)\n    #print(data)\n\ndef statistics(data):\n        numeric_columns = data.select_dtypes(include=['number']).columns\n        #print(numeric_columns)\n        mean_value = data.mean(numeric_only= True)\n        median_value = data.median(numeric_only= True)\n        mode_value = data.mode().iloc[0]         \n        # Using f-strings to format the output\n        print(f\"Mean value for each column: \\n{mean_value}\")\n        print(\"---------------------\")\n        print(f\"Median value for each column: \\n{median_value}\")\n        print('---------------------')\n        print(f\"Mode value for each column: \\n{mode_value}\")     \n        for column in numeric_columns:\n            total_sum = data[column].sum()     \n            std_value = data[column].std()     \n            count_value = data[column].count()\n            max_value = data[column].max()\n            min_value = data[column].min()\n            print(\"-----------------\")\n            print(f\"Total sum of '{column}': {total_sum}\")\n            print(f\"Standard Deviation of '{column}': {std_value}\")\n            print(f\"Count value of '{column}': {count_value}\")\n            print(f\"Max Value of '{column}': {max_value}\")\n            print(f\"Min Value of '{column}': {min_value}\")\n        return mean_value, median_value, mode_value\n\nmean_value, median_value, mode_value = statistics(data)\n\n\nMean value for each column: \nsepal length    5.843333\nsepal width     3.054000\npetal length    3.758667\npetal width     1.198667\ndtype: float64\n---------------------\nMedian value for each column: \nsepal length    5.80\nsepal width     3.00\npetal length    4.35\npetal width     1.30\ndtype: float64\n---------------------\nMode value for each column: \nsepal length            5.0\nsepal width             3.0\npetal length            1.5\npetal width             0.2\nclass           Iris-setosa\nName: 0, dtype: object\n-----------------\nTotal sum of 'sepal length': 876.5\nStandard Deviation of 'sepal length': 0.828066127977863\nCount value of 'sepal length': 150\nMax Value of 'sepal length': 7.9\nMin Value of 'sepal length': 4.3\n-----------------\nTotal sum of 'sepal width': 458.1\nStandard Deviation of 'sepal width': 0.4335943113621737\nCount value of 'sepal width': 150\nMax Value of 'sepal width': 4.4\nMin Value of 'sepal width': 2.0\n-----------------\nTotal sum of 'petal length': 563.8\nStandard Deviation of 'petal length': 1.7644204199522626\nCount value of 'petal length': 150\nMax Value of 'petal length': 6.9\nMin Value of 'petal length': 1.0\n-----------------\nTotal sum of 'petal width': 179.8\nStandard Deviation of 'petal width': 0.7631607417008411\nCount value of 'petal width': 150\nMax Value of 'petal width': 2.5\nMin Value of 'petal width': 0.1"
  },
  {
    "objectID": "posts/ploting/histogram.html#descriptive-statistics",
    "href": "posts/ploting/histogram.html#descriptive-statistics",
    "title": "Ploting",
    "section": "",
    "text": "Descriptive Statistics of iris dataset.\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('iris.data', delimiter=',', engine='python' )\ndata.to_excel('iris.xlsx', index=False)\n    #print(data)\n\ndef statistics(data):\n        numeric_columns = data.select_dtypes(include=['number']).columns\n        #print(numeric_columns)\n        mean_value = data.mean(numeric_only= True)\n        median_value = data.median(numeric_only= True)\n        mode_value = data.mode().iloc[0]         \n        # Using f-strings to format the output\n        print(\"---------------------\")\n        print(f\"Mean value for each column: \\n{mean_value}\")\n        print(\"---------------------\")\n        print(f\"Median value for each column: \\n{median_value}\")\n        print('---------------------')\n        print(f\"Mode value for each column: \\n{mode_value}\")     \n        for column in numeric_columns:\n            total_sum = data[column].sum()     \n            std_value = data[column].std()     \n            count_value = data[column].count()\n            max_value = data[column].max()\n            min_value = data[column].min()\n            print(\"-----------------\")\n            print(f\"Total sum of '{column}': {total_sum}\")\n            print(f\"Standard Deviation of '{column}': {std_value}\")\n            print(f\"Count value of '{column}': {count_value}\")\n            print(f\"Max Value of '{column}': {max_value}\")\n            print(f\"Min Value of '{column}': {min_value}\")\n        return mean_value, median_value, mode_value\n\nmean_value, median_value, mode_value = statistics(data)\n\n\n---------------------\nMean value for each column: \nsepal length    5.843333\nsepal width     3.054000\npetal length    3.758667\npetal width     1.198667\ndtype: float64\n---------------------\nMedian value for each column: \nsepal length    5.80\nsepal width     3.00\npetal length    4.35\npetal width     1.30\ndtype: float64\n---------------------\nMode value for each column: \nsepal length            5.0\nsepal width             3.0\npetal length            1.5\npetal width             0.2\nclass           Iris-setosa\nName: 0, dtype: object\n-----------------\nTotal sum of 'sepal length': 876.5\nStandard Deviation of 'sepal length': 0.828066127977863\nCount value of 'sepal length': 150\nMax Value of 'sepal length': 7.9\nMin Value of 'sepal length': 4.3\n-----------------\nTotal sum of 'sepal width': 458.1\nStandard Deviation of 'sepal width': 0.4335943113621737\nCount value of 'sepal width': 150\nMax Value of 'sepal width': 4.4\nMin Value of 'sepal width': 2.0\n-----------------\nTotal sum of 'petal length': 563.8\nStandard Deviation of 'petal length': 1.7644204199522626\nCount value of 'petal length': 150\nMax Value of 'petal length': 6.9\nMin Value of 'petal length': 1.0\n-----------------\nTotal sum of 'petal width': 179.8\nStandard Deviation of 'petal width': 0.7631607417008411\nCount value of 'petal width': 150\nMax Value of 'petal width': 2.5\nMin Value of 'petal width': 0.1"
  },
  {
    "objectID": "posts/ploting/histogram.html#histogram-plot",
    "href": "posts/ploting/histogram.html#histogram-plot",
    "title": "Ploting",
    "section": "Histogram Plot",
    "text": "Histogram Plot\nCode\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('iris.data', delimiter=',', engine='python' )\ndata.to_excel('iris.xlsx', index=False)\n    #print(data)\n\ndef histogram_plot(data):\n        # Select only numeric columns\n        numeric_columns = data.select_dtypes(include=['number']).columns\n        #print(numeric_columns)\n    \n        # Plot histogram for each numeric column\n        for column in numeric_columns:\n        #creates a new figure for the plot. Each time through the loop, a new figure is created to ensure that each histogram is plotted in its own separate window or plot.\n                plt.figure(figsize=(6, 4))\n                data[column].plot(kind='hist', bins=20, edgecolor='black')\n                plt.xlabel(column)\n                plt.ylabel('Frequency')\n                plt.title(f'Histogram of {column}')\n                plt.show()\n\nhistogram_plot(data)"
  },
  {
    "objectID": "posts/ploting/histogram.html#scatter-plot",
    "href": "posts/ploting/histogram.html#scatter-plot",
    "title": "Ploting",
    "section": "Scatter Plot",
    "text": "Scatter Plot\nCode\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('iris.data', delimiter=',', engine='python' )\ndata.to_excel('iris.xlsx', index=False)\n    #print(data)\n\ndef scatter_plot(data):\n    # Select only numeric columns\n    numeric_columns = data.select_dtypes(include=['number']).columns\n    colors = ['g','r']\n    # Create a color map\n    color_map = [colors[i % len(colors)] for i in range(len(data))]\n    for column1 in numeric_columns:\n        for column2 in numeric_columns:\n                if column1 != column2:\n                    plt.figure(figsize=(6, 4))\n                    plt.scatter(data[column1], data[column2], c=color_map, label='Data Points')\n                    plt.title(f\"Scatter Plot of: {column1} and {column2}\")\n                    plt.xlabel(column1)\n                    plt.ylabel(column2)\n                    plt.legend()\n                    plt.grid(True)\n                    plt.show()\n\nscatter_plot(data)"
  },
  {
    "objectID": "posts/ploting/histogram.html#line-plot",
    "href": "posts/ploting/histogram.html#line-plot",
    "title": "Ploting",
    "section": "Line Plot",
    "text": "Line Plot\nCode\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('iris.data', delimiter=',', engine='python' )\ndata.to_excel('iris.xlsx', index=False)\n    #print(data)\n\ndef line_plot(data):\n    # Select only numeric columns\n    numeric_columns = data.select_dtypes(include=['number']).columns\n    # Plot histogram for each numeric column\n    for column in numeric_columns:\n        plt.figure(figsize=(6, 4))\n        numeric_data = data.select_dtypes(include='number')\n        #print(numeric_data) numeric_data.index,\n        plt.plot(numeric_data[column], color='green' , label=column, linestyle='-', marker='o')\n        plt.title('Line Plot')\n        plt.xlabel('Index')\n        plt.ylabel(column)\n        plt.legend()\n        plt.grid(True)\n        plt.show()\n\nline_plot(data)"
  },
  {
    "objectID": "posts/ploting/histogram.html#box-plot",
    "href": "posts/ploting/histogram.html#box-plot",
    "title": "Ploting",
    "section": "Box Plot",
    "text": "Box Plot\nCode\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('iris.data', delimiter=',', engine='python' )\ndata.to_excel('iris.xlsx', index=False)\n    #print(data)\n\ndef box_plot(data):\n    # Select only numeric columns\n    numeric_columns = data.select_dtypes(include=['number']).columns\n    # Plot histogram for each numeric column\n    numeric_data = data.select_dtypes(include='number')\n    #print(numeric_data)\n    for column in numeric_columns:\n        plt.figure(figsize=(6, 4))\n        plt.boxplot(numeric_data[column])   #, tick_labels=numeric_columns\n        plt.title('Box Plot')\n        plt.xlabel(column)\n        plt.ylabel('Values')\n        plt.grid()\n        plt.show()\n\nbox_plot(data)"
  },
  {
    "objectID": "posts/ploting/ploting.html",
    "href": "posts/ploting/ploting.html",
    "title": "Ploting",
    "section": "",
    "text": "Code\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('iris.data', delimiter=',', engine='python' )\ndata.to_excel('iris.xlsx', index=False)\n    #print(data)\n\ndef statistics(data):\n        numeric_columns = data.select_dtypes(include=['number']).columns\n        #print(numeric_columns)\n        mean_value = data.mean(numeric_only= True)\n        median_value = data.median(numeric_only= True)\n        mode_value = data.mode().iloc[0]         \n        # Using f-strings to format the output\n        print(f\"Mean value for each column: \\n{mean_value}\")\n        print(\"---------------------\")\n        print(f\"Median value for each column: \\n{median_value}\")\n        print('---------------------')\n        print(f\"Mode value for each column: \\n{mode_value}\")     \n        for column in numeric_columns:\n            total_sum = data[column].sum()     \n            std_value = data[column].std()     \n            count_value = data[column].count()\n            max_value = data[column].max()\n            min_value = data[column].min()\n            print(\"-----------------\")\n            print(f\"Total sum of '{column}': {total_sum}\")\n            print(f\"Standard Deviation of '{column}': {std_value}\")\n            print(f\"Count value of '{column}': {count_value}\")\n            print(f\"Max Value of '{column}': {max_value}\")\n            print(f\"Min Value of '{column}': {min_value}\")\n        return mean_value, median_value, mode_value\n\nmean_value, median_value, mode_value = statistics(data)\n\n\nMean value for each column: \nsepal length    5.843333\nsepal width     3.054000\npetal length    3.758667\npetal width     1.198667\ndtype: float64\n---------------------\nMedian value for each column: \nsepal length    5.80\nsepal width     3.00\npetal length    4.35\npetal width     1.30\ndtype: float64\n---------------------\nMode value for each column: \nsepal length            5.0\nsepal width             3.0\npetal length            1.5\npetal width             0.2\nclass           Iris-setosa\nName: 0, dtype: object\n-----------------\nTotal sum of 'sepal length': 876.5\nStandard Deviation of 'sepal length': 0.828066127977863\nCount value of 'sepal length': 150\nMax Value of 'sepal length': 7.9\nMin Value of 'sepal length': 4.3\n-----------------\nTotal sum of 'sepal width': 458.1\nStandard Deviation of 'sepal width': 0.4335943113621737\nCount value of 'sepal width': 150\nMax Value of 'sepal width': 4.4\nMin Value of 'sepal width': 2.0\n-----------------\nTotal sum of 'petal length': 563.8\nStandard Deviation of 'petal length': 1.7644204199522626\nCount value of 'petal length': 150\nMax Value of 'petal length': 6.9\nMin Value of 'petal length': 1.0\n-----------------\nTotal sum of 'petal width': 179.8\nStandard Deviation of 'petal width': 0.7631607417008411\nCount value of 'petal width': 150\nMax Value of 'petal width': 2.5\nMin Value of 'petal width': 0.1"
  },
  {
    "objectID": "posts/ploting/ploting.html#main-code",
    "href": "posts/ploting/ploting.html#main-code",
    "title": "Ploting",
    "section": "",
    "text": "Code\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('iris.data', delimiter=',', engine='python' )\ndata.to_excel('iris.xlsx', index=False)\n    #print(data)\n\ndef statistics(data):\n        numeric_columns = data.select_dtypes(include=['number']).columns\n        #print(numeric_columns)\n        mean_value = data.mean(numeric_only= True)\n        median_value = data.median(numeric_only= True)\n        mode_value = data.mode().iloc[0]         \n        # Using f-strings to format the output\n        print(f\"Mean value for each column: \\n{mean_value}\")\n        print(\"---------------------\")\n        print(f\"Median value for each column: \\n{median_value}\")\n        print('---------------------')\n        print(f\"Mode value for each column: \\n{mode_value}\")     \n        for column in numeric_columns:\n            total_sum = data[column].sum()     \n            std_value = data[column].std()     \n            count_value = data[column].count()\n            max_value = data[column].max()\n            min_value = data[column].min()\n            print(\"-----------------\")\n            print(f\"Total sum of '{column}': {total_sum}\")\n            print(f\"Standard Deviation of '{column}': {std_value}\")\n            print(f\"Count value of '{column}': {count_value}\")\n            print(f\"Max Value of '{column}': {max_value}\")\n            print(f\"Min Value of '{column}': {min_value}\")\n        return mean_value, median_value, mode_value\n\nmean_value, median_value, mode_value = statistics(data)\n\n\nMean value for each column: \nsepal length    5.843333\nsepal width     3.054000\npetal length    3.758667\npetal width     1.198667\ndtype: float64\n---------------------\nMedian value for each column: \nsepal length    5.80\nsepal width     3.00\npetal length    4.35\npetal width     1.30\ndtype: float64\n---------------------\nMode value for each column: \nsepal length            5.0\nsepal width             3.0\npetal length            1.5\npetal width             0.2\nclass           Iris-setosa\nName: 0, dtype: object\n-----------------\nTotal sum of 'sepal length': 876.5\nStandard Deviation of 'sepal length': 0.828066127977863\nCount value of 'sepal length': 150\nMax Value of 'sepal length': 7.9\nMin Value of 'sepal length': 4.3\n-----------------\nTotal sum of 'sepal width': 458.1\nStandard Deviation of 'sepal width': 0.4335943113621737\nCount value of 'sepal width': 150\nMax Value of 'sepal width': 4.4\nMin Value of 'sepal width': 2.0\n-----------------\nTotal sum of 'petal length': 563.8\nStandard Deviation of 'petal length': 1.7644204199522626\nCount value of 'petal length': 150\nMax Value of 'petal length': 6.9\nMin Value of 'petal length': 1.0\n-----------------\nTotal sum of 'petal width': 179.8\nStandard Deviation of 'petal width': 0.7631607417008411\nCount value of 'petal width': 150\nMax Value of 'petal width': 2.5\nMin Value of 'petal width': 0.1"
  },
  {
    "objectID": "posts/ploting/ploting.html#histogram-plot",
    "href": "posts/ploting/ploting.html#histogram-plot",
    "title": "Ploting",
    "section": "Histogram Plot",
    "text": "Histogram Plot\nCode\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('iris.data', delimiter=',', engine='python' )\ndata.to_excel('iris.xlsx', index=False)\n    #print(data)\n\ndef histogram_plot(data):\n        # Select only numeric columns\n        numeric_columns = data.select_dtypes(include=['number']).columns\n        #print(numeric_columns)\n    \n        # Plot histogram for each numeric column\n        for column in numeric_columns:\n        #creates a new figure for the plot. Each time through the loop, a new figure is created to ensure that each histogram is plotted in its own separate window or plot.\n                plt.figure(figsize=(6, 4))\n                data[column].plot(kind='hist', bins=20, edgecolor='black')\n                plt.xlabel(column)\n                plt.ylabel('Frequency')\n                plt.title(f'Histogram of {column}')\n                plt.show()\n\nhistogram_plot(data)"
  },
  {
    "objectID": "posts/ploting/ploting.html#scatter-plot",
    "href": "posts/ploting/ploting.html#scatter-plot",
    "title": "Ploting",
    "section": "Scatter Plot",
    "text": "Scatter Plot\nCode\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('iris.data', delimiter=',', engine='python' )\ndata.to_excel('iris.xlsx', index=False)\n    #print(data)\n\ndef scatter_plot(data):\n    # Select only numeric columns\n    numeric_columns = data.select_dtypes(include=['number']).columns\n    colors = ['r','g']\n    # Create a color map\n    color_map = [colors[i % len(colors)] for i in range(len(data))]\n    for column1 in numeric_columns:\n        for column2 in numeric_columns:\n                if column1 != column2:\n                    plt.figure(figsize=(6, 4))\n                    plt.scatter(data[column1], data[column2], c=color_map, label=f'{column1} vs {column2}')\n                    plt.title(f\"Scatter Plot of: {column1} and {column2}\")\n                    plt.xlabel(column1)\n                    plt.ylabel(column2)\n                    plt.legend()\n                    plt.grid(True)\n                    plt.show()\n\nscatter_plot(data)"
  },
  {
    "objectID": "posts/ploting/ploting.html#line-plot",
    "href": "posts/ploting/ploting.html#line-plot",
    "title": "Ploting",
    "section": "Line Plot",
    "text": "Line Plot\nCode\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('iris.data', delimiter=',', engine='python' )\ndata.to_excel('iris.xlsx', index=False)\n    #print(data)\n\ndef line_plot(data):\n    # Select only numeric columns\n    numeric_columns = data.select_dtypes(include=['number']).columns\n    # Plot histogram for each numeric column\n    for column in numeric_columns:\n        plt.figure(figsize=(6, 6))\n        numeric_data = data.select_dtypes(include='number')\n        #print(numeric_data) numeric_data.index,\n        plt.plot(numeric_data[column], color='green' , label=column, linestyle='-', marker='o')\n        plt.title('Line Plot')\n        plt.xlabel('Index')\n        plt.ylabel(column)\n        plt.legend()\n        plt.grid(True)\n        plt.show()\n\nline_plot(data)"
  },
  {
    "objectID": "posts/ploting/ploting.html#box-plot",
    "href": "posts/ploting/ploting.html#box-plot",
    "title": "Ploting",
    "section": "Box Plot",
    "text": "Box Plot\nCode\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('iris.data', delimiter=',', engine='python' )\ndata.to_excel('iris.xlsx', index=False)\n    #print(data)\n\ndef box_plot(data):\n    # Select only numeric columns\n    numeric_columns = data.select_dtypes(include=['number']).columns\n    # Plot histogram for each numeric column\n    numeric_data = data.select_dtypes(include='number')\n    #print(numeric_data)\n    for column in numeric_columns:\n        plt.figure(figsize=(6, 4))\n        plt.boxplot(numeric_data[column])   #, tick_labels=numeric_columns\n        plt.title('Box Plot')\n        plt.xlabel(column)\n        plt.ylabel('Values')\n        plt.grid()\n        plt.show()\n\nbox_plot(data)"
  },
  {
    "objectID": "posts/ploting/iris_data.html",
    "href": "posts/ploting/iris_data.html",
    "title": "Report on Iris Data",
    "section": "",
    "text": "This image shows three species of iris flowers and describes the petals and sepals of flower.\n\n\nThe Iris data consists of measurements of iris flowers from three different species: Iris-setosa, Iris-versicolor, and Iris-virginica.\n\n\nClass: The class refers to the species of the iris flower: Iris-setosa, Iris-versicolor, Iris-virginica,\nFeatures: Sepal length, Sepal width, Petal length and Petal width.\n\n\n\nSepal Length: Length of the sepal in centimeters. Ranges from 4.3 to 7.9 cm in the dataset. Shows the length of the flower’s sepal.\nSepal Width: Width of the sepal in centimeters. Ranges from 2.0 to 4.4 cm in the dataset. Shows the width of the flower’s sepal.\nPetal Length: Length of the petal in centimeters. Ranges from 1.0 to 6.9 cm in the dataset. Shows the length of the flower’s petal.\nPetal Width: Width of the petal in centimeters. Ranges from 0.1 to 2.5 cm in the dataset. Shows the width of the flower’s petal.\n\n\n\nIris-setosa: Typically has smaller sepal lengths and widths compared to other species. Petal lengths and widths are also smaller.\nIris-versicolor: Intermediate measurements compared to the other two species. Sepal lengths and widths are moderate, and petal sizes are moderate as well.\nIris-virginica: Generally has larger sepal and petal measurements. Sepal lengths and widths are the largest in the dataset. Petal lengths and widths are also the largest."
  },
  {
    "objectID": "posts/ploting/iris_data.html#descriptive-statistics",
    "href": "posts/ploting/iris_data.html#descriptive-statistics",
    "title": "Report on Iris Data",
    "section": "Descriptive Statistics",
    "text": "Descriptive Statistics\nDescriptive Statistics for iris data set\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('iris.data', delimiter=',', engine='python' )\ndata.to_excel('iris.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n\ndef statistics(data):\n        #numeric_columns = data.select_dtypes(include=['number']).columns\n        #print(numeric_columns)\n        mean_value = grpdata.mean(numeric_only= True)\n        median_value = grpdata.median(numeric_only= True)\n        mode_value = grpdata.apply(lambda x: x.mode().iloc[0] if not x.mode().empty else None, include_groups=False)\n        #mode_value = grpdata.mode().iloc[0]         \n        # Using f-strings to format the output\n        print(f\"Mean value for each column: \\n{mean_value}\")\n        print(\"==========================================================\")\n        print(f\"Median value for each column: \\n{median_value}\")\n        print('===========================================================')\n        print(f\"Mode value for each column: \\n{mode_value}\")     \n        for column in columns:\n            total_sum = grpdata[column].sum()     \n            std_value = grpdata[column].std()     \n            count_value = grpdata[column].count()\n            max_value = grpdata[column].max()\n            min_value = grpdata[column].min()\n            print(\"=========================================================\")\n            print(f\"Total sum of '{column}': {total_sum}\")\n            print(f\"Standard Deviation of '{column}': {std_value}\")\n            print(f\"Count value of '{column}': {count_value}\")\n            print(f\"Max Value of '{column}': {max_value}\")\n            print(f\"Min Value of '{column}': {min_value}\")\n        return mean_value, median_value, mode_value\n\nmean_value, median_value, mode_value = statistics(data)\n\n\nMean value for each column: \n                 sepal length  sepal width  petal length  petal width\nclass                                                                \nIris-setosa             5.006        3.418         1.464        0.244\nIris-versicolor         5.936        2.770         4.260        1.326\nIris-virginica          6.588        2.974         5.552        2.026\n==========================================================\nMedian value for each column: \n                 sepal length  sepal width  petal length  petal width\nclass                                                                \nIris-setosa               5.0          3.4          1.50          0.2\nIris-versicolor           5.9          2.8          4.35          1.3\nIris-virginica            6.5          3.0          5.55          2.0\n===========================================================\nMode value for each column: \n0                sepal length  sepal width  petal length  petal width\nclass                                                                \nIris-setosa               5.0          3.4           1.5          0.2\nIris-versicolor           5.5          3.0           4.5          1.3\nIris-virginica            6.3          3.0           5.1          1.8\n=========================================================\nTotal sum of 'sepal length': class\nIris-setosa        250.3\nIris-versicolor    296.8\nIris-virginica     329.4\nName: sepal length, dtype: float64\nStandard Deviation of 'sepal length': class\nIris-setosa        0.352490\nIris-versicolor    0.516171\nIris-virginica     0.635880\nName: sepal length, dtype: float64\nCount value of 'sepal length': class\nIris-setosa        50\nIris-versicolor    50\nIris-virginica     50\nName: sepal length, dtype: int64\nMax Value of 'sepal length': class\nIris-setosa        5.8\nIris-versicolor    7.0\nIris-virginica     7.9\nName: sepal length, dtype: float64\nMin Value of 'sepal length': class\nIris-setosa        4.3\nIris-versicolor    4.9\nIris-virginica     4.9\nName: sepal length, dtype: float64\n=========================================================\nTotal sum of 'sepal width': class\nIris-setosa        170.9\nIris-versicolor    138.5\nIris-virginica     148.7\nName: sepal width, dtype: float64\nStandard Deviation of 'sepal width': class\nIris-setosa        0.381024\nIris-versicolor    0.313798\nIris-virginica     0.322497\nName: sepal width, dtype: float64\nCount value of 'sepal width': class\nIris-setosa        50\nIris-versicolor    50\nIris-virginica     50\nName: sepal width, dtype: int64\nMax Value of 'sepal width': class\nIris-setosa        4.4\nIris-versicolor    3.4\nIris-virginica     3.8\nName: sepal width, dtype: float64\nMin Value of 'sepal width': class\nIris-setosa        2.3\nIris-versicolor    2.0\nIris-virginica     2.2\nName: sepal width, dtype: float64\n=========================================================\nTotal sum of 'petal length': class\nIris-setosa         73.2\nIris-versicolor    213.0\nIris-virginica     277.6\nName: petal length, dtype: float64\nStandard Deviation of 'petal length': class\nIris-setosa        0.173511\nIris-versicolor    0.469911\nIris-virginica     0.551895\nName: petal length, dtype: float64\nCount value of 'petal length': class\nIris-setosa        50\nIris-versicolor    50\nIris-virginica     50\nName: petal length, dtype: int64\nMax Value of 'petal length': class\nIris-setosa        1.9\nIris-versicolor    5.1\nIris-virginica     6.9\nName: petal length, dtype: float64\nMin Value of 'petal length': class\nIris-setosa        1.0\nIris-versicolor    3.0\nIris-virginica     4.5\nName: petal length, dtype: float64\n=========================================================\nTotal sum of 'petal width': class\nIris-setosa         12.2\nIris-versicolor     66.3\nIris-virginica     101.3\nName: petal width, dtype: float64\nStandard Deviation of 'petal width': class\nIris-setosa        0.107210\nIris-versicolor    0.197753\nIris-virginica     0.274650\nName: petal width, dtype: float64\nCount value of 'petal width': class\nIris-setosa        50\nIris-versicolor    50\nIris-virginica     50\nName: petal width, dtype: int64\nMax Value of 'petal width': class\nIris-setosa        0.6\nIris-versicolor    1.8\nIris-virginica     2.5\nName: petal width, dtype: float64\nMin Value of 'petal width': class\nIris-setosa        0.1\nIris-versicolor    1.0\nIris-virginica     1.4\nName: petal width, dtype: float64"
  },
  {
    "objectID": "posts/ploting/iris_data.html#histogram-plot",
    "href": "posts/ploting/iris_data.html#histogram-plot",
    "title": "Report on Iris Data",
    "section": "Histogram Plot",
    "text": "Histogram Plot\nHistogram plot for iris data set\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('iris.data', delimiter=',', engine='python' )\ndata.to_excel('iris.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class'] \ngrpdata = data.groupby([\"class\"])\n#print(data)\nkey = {'Iris-setosa': 'Iris-setosa\\n\\nSepal Length:\\nTypically has shorter sepal lengths compared to the other species. The histogram for Iris-setosa might show a peak in the lower range of sepal lengths, indicating that most of its samples have shorter sepals.\\n\\nSepal Width:\\nOften has wider sepals compared to Iris-versicolor and Iris-virginica. The histogram for Iris-setosa might show higher frequencies in the wider range of sepal widths, indicating that most of its samples have broader sepals.\\n\\nPetal Length:\\nCharacterized by relatively short petals. The histogram for Iris-setosa would show a peak in the lower range of petal lengths, reflecting that most samples have short petals.\\n\\nPetal Width:\\nIt has relatively narrow petals. The histogram for Iris-setosa would show a peak in the lower range of petal widths, indicating that the petal width is generally smaller.', 'Iris-versicolor': 'Iris-versicolor\\n\\nSepal Length:\\nThe sepal lengths for Iris-versicolor are generally intermediate between Iris-setosa and Iris-virginica. Its histogram might show a moderate range of sepal lengths, with some overlap with Iris-setosa but not extending as far as Iris-virginica.\\n\\nSepal Width:\\nTypically has intermediate sepal widths. The histogram might show a narrower range of widths compared to Iris-setosa but wider than Iris-virginica.\\n\\nPetal Length:\\nDisplays intermediate petal lengths. The histogram might show a distribution with moderate petal lengths, indicating that the petal length is neither too short nor too long.\\n\\nPetal Width:\\nExhibits intermediate petal widths. The histogram might show a more balanced distribution, with petal widths being neither too narrow nor too wide.', 'Iris-virginica': 'Iris-virginica\\n\\nSepal Length:\\nUsually has the longest sepals of the three species. The histogram for Iris-virginica would likely show a peak in the higher range of sepal lengths, indicating that this species tends to have longer sepals.\\n\\nSepal Width:\\nGenerally has the narrowest sepals. The histogram for Iris-virginica might show peaks in the lower range of sepal widths, indicating that its samples tend to have narrower sepals.\\n\\nPetal Length:\\nKnown for having the longest petals among the species. The histogram for Iris-virginica would likely show a peak in the higher range of petal lengths, indicating that this species typically has longer petals.\\n\\nPetal Width:\\nTypically has the widest petals. The histogram for Iris-virginica would likely show a peak in the higher range of petal widths, indicating that this species tends to have broader petals.'}\n\ndef histogram_plot(data):\n    for name, group in grpdata:\n        class_name = name if isinstance(name, str) else name[0]\n        class_key = key.get(class_name)\n        if class_key is not None:\n            print(class_key)\n        else:\n            print(f\"No class_key found for {class_name}\")\n        #print(class_name)\n        for column in columns:\n            plt.figure(figsize=(6,4))\n            plt.hist(group[column], bins=50, alpha=0.7, label=column)\n            plt.xlabel(column)\n            plt.ylabel('Frequency')\n            plt.title(f'Histogram of {column}')\n            plt.legend()\n            plt.show()\n\nhistogram_plot(data)\n\n\nIris-setosa\n\nSepal Length:\nTypically has shorter sepal lengths compared to the other species. The histogram for Iris-setosa might show a peak in the lower range of sepal lengths, indicating that most of its samples have shorter sepals.\n\nSepal Width:\nOften has wider sepals compared to Iris-versicolor and Iris-virginica. The histogram for Iris-setosa might show higher frequencies in the wider range of sepal widths, indicating that most of its samples have broader sepals.\n\nPetal Length:\nCharacterized by relatively short petals. The histogram for Iris-setosa would show a peak in the lower range of petal lengths, reflecting that most samples have short petals.\n\nPetal Width:\nIt has relatively narrow petals. The histogram for Iris-setosa would show a peak in the lower range of petal widths, indicating that the petal width is generally smaller.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIris-versicolor\n\nSepal Length:\nThe sepal lengths for Iris-versicolor are generally intermediate between Iris-setosa and Iris-virginica. Its histogram might show a moderate range of sepal lengths, with some overlap with Iris-setosa but not extending as far as Iris-virginica.\n\nSepal Width:\nTypically has intermediate sepal widths. The histogram might show a narrower range of widths compared to Iris-setosa but wider than Iris-virginica.\n\nPetal Length:\nDisplays intermediate petal lengths. The histogram might show a distribution with moderate petal lengths, indicating that the petal length is neither too short nor too long.\n\nPetal Width:\nExhibits intermediate petal widths. The histogram might show a more balanced distribution, with petal widths being neither too narrow nor too wide.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIris-virginica\n\nSepal Length:\nUsually has the longest sepals of the three species. The histogram for Iris-virginica would likely show a peak in the higher range of sepal lengths, indicating that this species tends to have longer sepals.\n\nSepal Width:\nGenerally has the narrowest sepals. The histogram for Iris-virginica might show peaks in the lower range of sepal widths, indicating that its samples tend to have narrower sepals.\n\nPetal Length:\nKnown for having the longest petals among the species. The histogram for Iris-virginica would likely show a peak in the higher range of petal lengths, indicating that this species typically has longer petals.\n\nPetal Width:\nTypically has the widest petals. The histogram for Iris-virginica would likely show a peak in the higher range of petal widths, indicating that this species tends to have broader petals."
  },
  {
    "objectID": "posts/ploting/iris_data.html#scatter-plot",
    "href": "posts/ploting/iris_data.html#scatter-plot",
    "title": "Report on Iris Data",
    "section": "Scatter Plot",
    "text": "Scatter Plot\nScatter plot for iris data set\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('iris.data', delimiter=',', engine='python' )\ndata.to_excel('iris.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n    #print(data)\n\ndef scatter_plot(data):\n    colors = ['r', 'g', 'b']  # Define more colors if there are more than 2 classes\n\n    for column1 in columns:\n        for column2 in columns:\n            if column1 != column2:\n                plt.figure(figsize=(7,7))  # Create a larger figure for better visualization\n                for name, group in grpdata:\n                    color_map = colors[:len(grpdata)]\n                    plt.scatter(group[column1], group[column2], label=name)\n                plt.title(f\"Scatter Plot of {column1} and {column2}\")\n                plt.xlabel(column1)\n                plt.ylabel(column2)\n                plt.legend()\n                plt.grid(True)\n                plt.show()\n\n\n\nscatter_plot(data)"
  },
  {
    "objectID": "posts/ploting/iris_data.html#line-plot",
    "href": "posts/ploting/iris_data.html#line-plot",
    "title": "Report on Iris Data",
    "section": "Line Plot",
    "text": "Line Plot\nLine plot for iris data set\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('iris.data', delimiter=',', engine='python' )\ndata.to_excel('iris.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class'] \ngrpdata = data.groupby([\"class\"])\n    #print(data)\n\ndef line_plot(data):\n    # Select only numeric columns\n    #numeric_columns = data.select_dtypes(include=['number']).columns\n    # Plot histogram for each numeric column\n    for name, group in grpdata:\n        print(name)\n        for column in columns:\n            plt.figure(figsize=(6, 6))\n            numeric_data = data.select_dtypes(include='number')\n            #print(numeric_data) numeric_data.index,\n            plt.plot(group[column], color='green' , label=column, linestyle='-', marker='o')\n            plt.title('Line Plot')\n            plt.xlabel('Index')\n            plt.ylabel(column)\n            plt.legend()\n            plt.grid(True)\n            plt.show()\n\nline_plot(data)\n\n\n('Iris-setosa',)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n('Iris-versicolor',)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n('Iris-virginica',)"
  },
  {
    "objectID": "posts/ploting/iris_data.html#box-plot",
    "href": "posts/ploting/iris_data.html#box-plot",
    "title": "Report on Iris Data",
    "section": "Box Plot",
    "text": "Box Plot\nConstruction of a box plot is based around a dataset’s quartiles, or the values that divide the dataset into equal fourths. The first quartile (Q1) is greater than 25% of the data and less than the other 75%. The second quartile (Q2) sits in the middle, dividing the data in half. Q2 is also known as the median. The third quartile (Q3) is larger than 75% of the data, and smaller than the remaining 25%. In a box and whiskers plot, the ends of the box and its center line mark the locations of these three quartiles.\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('iris.data', delimiter=',', engine='python' )\ndata.to_excel('iris.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class'] \ngrpdata = data.groupby([\"class\"])\n    #print(data)\n\ndef box_plot(data):\n    # Select only numeric columns\n    #numeric_columns = data.select_dtypes(include=['number']).columns\n    # Plot histogram for each numeric column\n    #numeric_data = data.select_dtypes(include='number')\n    #print(numeric_data)\n    for name, group in grpdata:\n        class_name = name if isinstance(name, str) else name[0]\n        print(class_name)\n        for column in columns:\n            plt.figure(figsize=(6, 4))\n            plt.boxplot(group[column])   #, tick_labels=numeric_columns\n            plt.title('Box Plot')\n            plt.xlabel(column)\n            plt.ylabel('Values')\n            plt.grid()\n            plt.show()\n\nbox_plot(data)\n\n\nIris-setosa\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIris-versicolor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIris-virginica"
  },
  {
    "objectID": "posts/ploting/iris_data.html#different-plotings-and-descriptive-statistics-for-iris-dataset",
    "href": "posts/ploting/iris_data.html#different-plotings-and-descriptive-statistics-for-iris-dataset",
    "title": "Ploting",
    "section": "",
    "text": "Different plotings and descriptive statistics for iris dataset"
  },
  {
    "objectID": "posts/ploting/iris_data.html#section",
    "href": "posts/ploting/iris_data.html#section",
    "title": "Ploting",
    "section": "",
    "text": "Different plotings and Descriptive Statistics for iris dataset"
  },
  {
    "objectID": "posts/ploting/iris_data.html#iris-data",
    "href": "posts/ploting/iris_data.html#iris-data",
    "title": "Report on Iris Data",
    "section": "",
    "text": "Different plotings and Descriptive Statistics for iris dataset"
  },
  {
    "objectID": "posts/ploting/wine_data.html",
    "href": "posts/ploting/wine_data.html",
    "title": "Report on Wine Data",
    "section": "",
    "text": "Wine\n\n\n\n\nThe Wine data consists of measurements of various chemical properties of different types of wine. It is organized in a tabular format with multiple columns, each representing a specific property, and rows representing different wine samples.\n\n\n\nColumns in wine data:\nclass: Class label (1, 2, or 3) representing different types of wine. Alcohol Malicacid Ash Alcalinity_of_ash Magnesium Total_phenols Flavanoids Nonflavanoid_phenols Proanthocyanins Color_intensity Hue 0D280_0D315_of_diluted_wines Proline\n\n\n\nDescriptive Statistics for wine data set\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('wine.data', delimiter=',', engine='python' )\ndata.to_excel('wine.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n\ndef statistics(data):\n        #numeric_columns = data.select_dtypes(include=['number']).columns\n        #print(numeric_columns)\n        mean_value = grpdata.mean(numeric_only= True)\n        median_value = grpdata.median(numeric_only= True)\n        mode_value = grpdata.apply(lambda x: x.mode().iloc[0] if not x.mode().empty else None, include_groups=False)\n        #mode_value = grpdata.mode().iloc[0]         \n        # Using f-strings to format the output\n        print(f\"Mean value for each column: \\n{mean_value}\")\n        print(\"==========================================================\")\n        print(f\"Median value for each column: \\n{median_value}\")\n        print('===========================================================')\n        print(f\"Mode value for each column: \\n{mode_value}\")     \n        for column in columns:\n            total_sum = grpdata[column].sum()     \n            std_value = grpdata[column].std()     \n            count_value = grpdata[column].count()\n            max_value = grpdata[column].max()\n            min_value = grpdata[column].min()\n            print(\"=========================================================\")\n            print(f\"Total sum of '{column}': {total_sum}\")\n            print(f\"Standard Deviation of '{column}': {std_value}\")\n            print(f\"Count value of '{column}': {count_value}\")\n            print(f\"Max Value of '{column}': {max_value}\")\n            print(f\"Min Value of '{column}': {min_value}\")\n        return mean_value, median_value, mode_value\n\nmean_value, median_value, mode_value = statistics(data)\n\n\nMean value for each column: \n         Alcohol  Malicacid       Ash  Alcalinity_of_ash   Magnesium  \\\nclass                                                                  \n1      13.744746   2.010678  2.455593          17.037288  106.338983   \n2      12.278732   1.932676  2.244789          20.238028   94.549296   \n3      13.153750   3.333750  2.437083          21.416667   99.312500   \n\n       Total_phenols  Flavanoids  Nonflavanoid_phenols  Proanthocyanins  \\\nclass                                                                     \n1           2.840169    2.982373              0.290000         1.899322   \n2           2.258873    2.080845              0.363662         1.630282   \n3           1.678750    0.781458              0.447500         1.153542   \n\n       Color_intensity       Hue  0D280_0D315_of_diluted_wines      Proline  \nclass                                                                        \n1             5.528305  1.062034                      3.157797  1115.711864  \n2             3.086620  1.056282                      2.785352   519.507042  \n3             7.396250  0.682708                      1.683542   629.895833  \n==========================================================\nMedian value for each column: \n       Alcohol  Malicacid   Ash  Alcalinity_of_ash  Magnesium  Total_phenols  \\\nclass                                                                          \n1       13.750      1.770  2.44               16.8      104.0          2.800   \n2       12.290      1.610  2.24               20.0       88.0          2.200   \n3       13.165      3.265  2.38               21.0       97.0          1.635   \n\n       Flavanoids  Nonflavanoid_phenols  Proanthocyanins  Color_intensity  \\\nclass                                                                       \n1           2.980                  0.29            1.870             5.40   \n2           2.030                  0.37            1.610             2.90   \n3           0.685                  0.47            1.105             7.55   \n\n         Hue  0D280_0D315_of_diluted_wines  Proline  \nclass                                                \n1      1.070                          3.17   1095.0  \n2      1.040                          2.83    495.0  \n3      0.665                          1.66    627.5  \n===========================================================\nMode value for each column: \n0      Alcohol  Malicacid   Ash  Alcalinity_of_ash  Magnesium  Total_phenols  \\\nclass                                                                          \n1        13.05       1.73  2.36               16.0      101.0           3.00   \n2        12.37       1.51  1.92               18.0       86.0           2.20   \n3        12.25       3.03  2.48               20.0       88.0           1.48   \n\n0      Flavanoids  Nonflavanoid_phenols  Proanthocyanins  Color_intensity  \\\nclass                                                                       \n1            2.68                  0.26             1.66              5.1   \n2            2.03                  0.37             1.35              2.6   \n3            0.58                  0.53             0.94              5.0   \n\n0       Hue  0D280_0D315_of_diluted_wines  Proline  \nclass                                               \n1      1.04                          3.00   1035.0  \n2      1.23                          2.78    450.0  \n3      0.57                          1.33    520.0  \n=========================================================\nTotal sum of 'Alcohol': class\n1    810.94\n2    871.79\n3    631.38\nName: Alcohol, dtype: float64\nStandard Deviation of 'Alcohol': class\n1    0.462125\n2    0.537964\n3    0.530241\nName: Alcohol, dtype: float64\nCount value of 'Alcohol': class\n1    59\n2    71\n3    48\nName: Alcohol, dtype: int64\nMax Value of 'Alcohol': class\n1    14.83\n2    13.86\n3    14.34\nName: Alcohol, dtype: float64\nMin Value of 'Alcohol': class\n1    12.85\n2    11.03\n3    12.20\nName: Alcohol, dtype: float64\n=========================================================\nTotal sum of 'Malicacid': class\n1    118.63\n2    137.22\n3    160.02\nName: Malicacid, dtype: float64\nStandard Deviation of 'Malicacid': class\n1    0.688549\n2    1.015569\n3    1.087906\nName: Malicacid, dtype: float64\nCount value of 'Malicacid': class\n1    59\n2    71\n3    48\nName: Malicacid, dtype: int64\nMax Value of 'Malicacid': class\n1    4.04\n2    5.80\n3    5.65\nName: Malicacid, dtype: float64\nMin Value of 'Malicacid': class\n1    1.35\n2    0.74\n3    1.24\nName: Malicacid, dtype: float64\n=========================================================\nTotal sum of 'Ash': class\n1    144.88\n2    159.38\n3    116.98\nName: Ash, dtype: float64\nStandard Deviation of 'Ash': class\n1    0.227166\n2    0.315467\n3    0.184690\nName: Ash, dtype: float64\nCount value of 'Ash': class\n1    59\n2    71\n3    48\nName: Ash, dtype: int64\nMax Value of 'Ash': class\n1    3.22\n2    3.23\n3    2.86\nName: Ash, dtype: float64\nMin Value of 'Ash': class\n1    2.04\n2    1.36\n3    2.10\nName: Ash, dtype: float64\n=========================================================\nTotal sum of 'Alcalinity_of_ash': class\n1    1005.2\n2    1436.9\n3    1028.0\nName: Alcalinity_of_ash, dtype: float64\nStandard Deviation of 'Alcalinity_of_ash': class\n1    2.546322\n2    3.349770\n3    2.258161\nName: Alcalinity_of_ash, dtype: float64\nCount value of 'Alcalinity_of_ash': class\n1    59\n2    71\n3    48\nName: Alcalinity_of_ash, dtype: int64\nMax Value of 'Alcalinity_of_ash': class\n1    25.0\n2    30.0\n3    27.0\nName: Alcalinity_of_ash, dtype: float64\nMin Value of 'Alcalinity_of_ash': class\n1    11.2\n2    10.6\n3    17.5\nName: Alcalinity_of_ash, dtype: float64\n=========================================================\nTotal sum of 'Magnesium': class\n1    6274\n2    6713\n3    4767\nName: Magnesium, dtype: int64\nStandard Deviation of 'Magnesium': class\n1    10.498949\n2    16.753497\n3    10.890473\nName: Magnesium, dtype: float64\nCount value of 'Magnesium': class\n1    59\n2    71\n3    48\nName: Magnesium, dtype: int64\nMax Value of 'Magnesium': class\n1    132\n2    162\n3    123\nName: Magnesium, dtype: int64\nMin Value of 'Magnesium': class\n1    89\n2    70\n3    80\nName: Magnesium, dtype: int64\n=========================================================\nTotal sum of 'Total_phenols': class\n1    167.57\n2    160.38\n3     80.58\nName: Total_phenols, dtype: float64\nStandard Deviation of 'Total_phenols': class\n1    0.338961\n2    0.545361\n3    0.356971\nName: Total_phenols, dtype: float64\nCount value of 'Total_phenols': class\n1    59\n2    71\n3    48\nName: Total_phenols, dtype: int64\nMax Value of 'Total_phenols': class\n1    3.88\n2    3.52\n3    2.80\nName: Total_phenols, dtype: float64\nMin Value of 'Total_phenols': class\n1    2.20\n2    1.10\n3    0.98\nName: Total_phenols, dtype: float64\n=========================================================\nTotal sum of 'Flavanoids': class\n1    175.96\n2    147.74\n3     37.51\nName: Flavanoids, dtype: float64\nStandard Deviation of 'Flavanoids': class\n1    0.397494\n2    0.705701\n3    0.293504\nName: Flavanoids, dtype: float64\nCount value of 'Flavanoids': class\n1    59\n2    71\n3    48\nName: Flavanoids, dtype: int64\nMax Value of 'Flavanoids': class\n1    3.93\n2    5.08\n3    1.57\nName: Flavanoids, dtype: float64\nMin Value of 'Flavanoids': class\n1    2.19\n2    0.57\n3    0.34\nName: Flavanoids, dtype: float64\n=========================================================\nTotal sum of 'Nonflavanoid_phenols': class\n1    17.11\n2    25.82\n3    21.48\nName: Nonflavanoid_phenols, dtype: float64\nStandard Deviation of 'Nonflavanoid_phenols': class\n1    0.070049\n2    0.123961\n3    0.124140\nName: Nonflavanoid_phenols, dtype: float64\nCount value of 'Nonflavanoid_phenols': class\n1    59\n2    71\n3    48\nName: Nonflavanoid_phenols, dtype: int64\nMax Value of 'Nonflavanoid_phenols': class\n1    0.50\n2    0.66\n3    0.63\nName: Nonflavanoid_phenols, dtype: float64\nMin Value of 'Nonflavanoid_phenols': class\n1    0.17\n2    0.13\n3    0.17\nName: Nonflavanoid_phenols, dtype: float64\n=========================================================\nTotal sum of 'Proanthocyanins': class\n1    112.06\n2    115.75\n3     55.37\nName: Proanthocyanins, dtype: float64\nStandard Deviation of 'Proanthocyanins': class\n1    0.412109\n2    0.602068\n3    0.408836\nName: Proanthocyanins, dtype: float64\nCount value of 'Proanthocyanins': class\n1    59\n2    71\n3    48\nName: Proanthocyanins, dtype: int64\nMax Value of 'Proanthocyanins': class\n1    2.96\n2    3.58\n3    2.70\nName: Proanthocyanins, dtype: float64\nMin Value of 'Proanthocyanins': class\n1    1.25\n2    0.41\n3    0.55\nName: Proanthocyanins, dtype: float64\n=========================================================\nTotal sum of 'Color_intensity': class\n1    326.170000\n2    219.150000\n3    355.019999\nName: Color_intensity, dtype: float64\nStandard Deviation of 'Color_intensity': class\n1    1.238573\n2    0.924929\n3    2.310942\nName: Color_intensity, dtype: float64\nCount value of 'Color_intensity': class\n1    59\n2    71\n3    48\nName: Color_intensity, dtype: int64\nMax Value of 'Color_intensity': class\n1     8.9\n2     6.0\n3    13.0\nName: Color_intensity, dtype: float64\nMin Value of 'Color_intensity': class\n1    3.52\n2    1.28\n3    3.85\nName: Color_intensity, dtype: float64\n=========================================================\nTotal sum of 'Hue': class\n1    62.660\n2    74.996\n3    32.770\nName: Hue, dtype: float64\nStandard Deviation of 'Hue': class\n1    0.116483\n2    0.202937\n3    0.114441\nName: Hue, dtype: float64\nCount value of 'Hue': class\n1    59\n2    71\n3    48\nName: Hue, dtype: int64\nMax Value of 'Hue': class\n1    1.28\n2    1.71\n3    0.96\nName: Hue, dtype: float64\nMin Value of 'Hue': class\n1    0.82\n2    0.69\n3    0.48\nName: Hue, dtype: float64\n=========================================================\nTotal sum of '0D280_0D315_of_diluted_wines': class\n1    186.31\n2    197.76\n3     80.81\nName: 0D280_0D315_of_diluted_wines, dtype: float64\nStandard Deviation of '0D280_0D315_of_diluted_wines': class\n1    0.357077\n2    0.496573\n3    0.272111\nName: 0D280_0D315_of_diluted_wines, dtype: float64\nCount value of '0D280_0D315_of_diluted_wines': class\n1    59\n2    71\n3    48\nName: 0D280_0D315_of_diluted_wines, dtype: int64\nMax Value of '0D280_0D315_of_diluted_wines': class\n1    4.00\n2    3.69\n3    2.47\nName: 0D280_0D315_of_diluted_wines, dtype: float64\nMin Value of '0D280_0D315_of_diluted_wines': class\n1    2.51\n2    1.59\n3    1.27\nName: 0D280_0D315_of_diluted_wines, dtype: float64\n=========================================================\nTotal sum of 'Proline': class\n1    65827\n2    36885\n3    30235\nName: Proline, dtype: int64\nStandard Deviation of 'Proline': class\n1    221.520767\n2    157.211220\n3    115.097043\nName: Proline, dtype: float64\nCount value of 'Proline': class\n1    59\n2    71\n3    48\nName: Proline, dtype: int64\nMax Value of 'Proline': class\n1    1680\n2     985\n3     880\nName: Proline, dtype: int64\nMin Value of 'Proline': class\n1    680\n2    278\n3    415\nName: Proline, dtype: int64\n\n\n\n\n\nHistogram plot for wine data set\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\ndata = pd.read_csv('wine.data', delimiter=',', engine='python' )\ndata.to_excel('wine.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n#numeric_columns = data.select_dtypes(include=['number'])\n#print(numeric_columns)\n\n\ndef histogram_plot(data):\n        # Plot histogram for each numeric column\n            for column in columns:\n                for name, group in grpdata:\n                    plt.figure(figsize=(6,4))\n                    class_name = name if isinstance(name, str) else name[0]\n                    print(\"class\" , class_name)\n                    plt.hist(group[column], bins=80, alpha=0.7, label=column)\n                    plt.xlabel(column)\n                    plt.ylabel('Frequency')\n                    plt.title(f'Histogram of {column}')\n                    plt.show()\n\n# Call the function with the data\nhistogram_plot(data)\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\n\n\n\nScatter plot for iris data set\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('wine.data', delimiter=',', engine='python' )\ndata.to_excel('wine.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n    #print(data)\n\ndef scatter_plot(data):\n    colors = ['r', 'g', 'b']  # Define more colors if there are more than 2 classes\n\n    for column1 in columns:\n        for column2 in columns:\n            if column1 != column2:\n                plt.figure(figsize=(7,7))  # Create a larger figure for better visualization\n                for name, group in grpdata:\n                    color_map = colors[:len(grpdata)]\n                    plt.scatter(group[column1], group[column2], label=f' \"class\"{name}')\n                plt.title(f\"Scatter Plot of {column1} and {column2}\")\n                plt.xlabel(column1)\n                plt.ylabel(column2)\n                plt.legend()\n                plt.grid(True)\n                plt.show()\n\n\nscatter_plot(data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLine plot for wine data set\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('wine.data', delimiter=',', engine='python' )\ndata.to_excel('wine.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n    #print(data)\n\ndef line_plot(data):\n    # Select only numeric columns\n    #numeric_columns = data.select_dtypes(include=['number']).columns\n    # Plot histogram for each numeric column\n    for name, group in grpdata:\n        class_name = name if isinstance(name, str) else name[0]\n        print(\"class\", class_name)\n        for column in columns:\n                plt.figure(figsize=(6, 4))\n                plt.plot(group.index, group[column], color='green' , label=column, linestyle='-', marker='o')\n                plt.title('Line Plot')\n                plt.xlabel('Index')\n                plt.ylabel(column)\n                plt.legend()\n                plt.grid(True)\n                plt.show()\n\nline_plot(data)\n\n\nclass 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBox plot for iris data set\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('wine.data', delimiter=',', engine='python' )\ndata.to_excel('wine.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n    #print(data)\n\ndef box_plot(data):\n    for name, group in grpdata:\n        class_name = name if isinstance(name, str) else name[0]\n        print(\"class\" , class_name)\n        for column in columns:\n            plt.figure(figsize=(6, 4))\n            plt.boxplot(group[column])   #, tick_labels=numeric_columns\n            plt.title('Box Plot')\n            plt.xlabel(column)\n            plt.ylabel('Values')\n            plt.grid()\n            plt.show()\n\nbox_plot(data)\n\n\nclass 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass 3"
  },
  {
    "objectID": "posts/ploting/wine_data.html#wine-data",
    "href": "posts/ploting/wine_data.html#wine-data",
    "title": "Report on Wine Data",
    "section": "",
    "text": "Different plotings and Descriptive Statistics for wine dataset"
  },
  {
    "objectID": "posts/ploting/wine_data.html#descriptive-statistics",
    "href": "posts/ploting/wine_data.html#descriptive-statistics",
    "title": "Report on Wine Data",
    "section": "",
    "text": "Descriptive Statistics for wine data set\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('wine.data', delimiter=',', engine='python' )\ndata.to_excel('wine.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n\ndef statistics(data):\n        #numeric_columns = data.select_dtypes(include=['number']).columns\n        #print(numeric_columns)\n        mean_value = grpdata.mean(numeric_only= True)\n        median_value = grpdata.median(numeric_only= True)\n        mode_value = grpdata.apply(lambda x: x.mode().iloc[0] if not x.mode().empty else None, include_groups=False)\n        #mode_value = grpdata.mode().iloc[0]         \n        # Using f-strings to format the output\n        print(f\"Mean value for each column: \\n{mean_value}\")\n        print(\"==========================================================\")\n        print(f\"Median value for each column: \\n{median_value}\")\n        print('===========================================================')\n        print(f\"Mode value for each column: \\n{mode_value}\")     \n        for column in columns:\n            total_sum = grpdata[column].sum()     \n            std_value = grpdata[column].std()     \n            count_value = grpdata[column].count()\n            max_value = grpdata[column].max()\n            min_value = grpdata[column].min()\n            print(\"=========================================================\")\n            print(f\"Total sum of '{column}': {total_sum}\")\n            print(f\"Standard Deviation of '{column}': {std_value}\")\n            print(f\"Count value of '{column}': {count_value}\")\n            print(f\"Max Value of '{column}': {max_value}\")\n            print(f\"Min Value of '{column}': {min_value}\")\n        return mean_value, median_value, mode_value\n\nmean_value, median_value, mode_value = statistics(data)\n\n\nMean value for each column: \n         Alcohol  Malicacid       Ash  Alcalinity_of_ash   Magnesium  \\\nclass                                                                  \n1      13.744746   2.010678  2.455593          17.037288  106.338983   \n2      12.278732   1.932676  2.244789          20.238028   94.549296   \n3      13.153750   3.333750  2.437083          21.416667   99.312500   \n\n       Total_phenols  Flavanoids  Nonflavanoid_phenols  Proanthocyanins  \\\nclass                                                                     \n1           2.840169    2.982373              0.290000         1.899322   \n2           2.258873    2.080845              0.363662         1.630282   \n3           1.678750    0.781458              0.447500         1.153542   \n\n       Color_intensity       Hue  0D280_0D315_of_diluted_wines      Proline  \nclass                                                                        \n1             5.528305  1.062034                      3.157797  1115.711864  \n2             3.086620  1.056282                      2.785352   519.507042  \n3             7.396250  0.682708                      1.683542   629.895833  \n==========================================================\nMedian value for each column: \n       Alcohol  Malicacid   Ash  Alcalinity_of_ash  Magnesium  Total_phenols  \\\nclass                                                                          \n1       13.750      1.770  2.44               16.8      104.0          2.800   \n2       12.290      1.610  2.24               20.0       88.0          2.200   \n3       13.165      3.265  2.38               21.0       97.0          1.635   \n\n       Flavanoids  Nonflavanoid_phenols  Proanthocyanins  Color_intensity  \\\nclass                                                                       \n1           2.980                  0.29            1.870             5.40   \n2           2.030                  0.37            1.610             2.90   \n3           0.685                  0.47            1.105             7.55   \n\n         Hue  0D280_0D315_of_diluted_wines  Proline  \nclass                                                \n1      1.070                          3.17   1095.0  \n2      1.040                          2.83    495.0  \n3      0.665                          1.66    627.5  \n===========================================================\nMode value for each column: \n0      Alcohol  Malicacid   Ash  Alcalinity_of_ash  Magnesium  Total_phenols  \\\nclass                                                                          \n1        13.05       1.73  2.36               16.0      101.0           3.00   \n2        12.37       1.51  1.92               18.0       86.0           2.20   \n3        12.25       3.03  2.48               20.0       88.0           1.48   \n\n0      Flavanoids  Nonflavanoid_phenols  Proanthocyanins  Color_intensity  \\\nclass                                                                       \n1            2.68                  0.26             1.66              5.1   \n2            2.03                  0.37             1.35              2.6   \n3            0.58                  0.53             0.94              5.0   \n\n0       Hue  0D280_0D315_of_diluted_wines  Proline  \nclass                                               \n1      1.04                          3.00   1035.0  \n2      1.23                          2.78    450.0  \n3      0.57                          1.33    520.0  \n=========================================================\nTotal sum of 'Alcohol': class\n1    810.94\n2    871.79\n3    631.38\nName: Alcohol, dtype: float64\nStandard Deviation of 'Alcohol': class\n1    0.462125\n2    0.537964\n3    0.530241\nName: Alcohol, dtype: float64\nCount value of 'Alcohol': class\n1    59\n2    71\n3    48\nName: Alcohol, dtype: int64\nMax Value of 'Alcohol': class\n1    14.83\n2    13.86\n3    14.34\nName: Alcohol, dtype: float64\nMin Value of 'Alcohol': class\n1    12.85\n2    11.03\n3    12.20\nName: Alcohol, dtype: float64\n=========================================================\nTotal sum of 'Malicacid': class\n1    118.63\n2    137.22\n3    160.02\nName: Malicacid, dtype: float64\nStandard Deviation of 'Malicacid': class\n1    0.688549\n2    1.015569\n3    1.087906\nName: Malicacid, dtype: float64\nCount value of 'Malicacid': class\n1    59\n2    71\n3    48\nName: Malicacid, dtype: int64\nMax Value of 'Malicacid': class\n1    4.04\n2    5.80\n3    5.65\nName: Malicacid, dtype: float64\nMin Value of 'Malicacid': class\n1    1.35\n2    0.74\n3    1.24\nName: Malicacid, dtype: float64\n=========================================================\nTotal sum of 'Ash': class\n1    144.88\n2    159.38\n3    116.98\nName: Ash, dtype: float64\nStandard Deviation of 'Ash': class\n1    0.227166\n2    0.315467\n3    0.184690\nName: Ash, dtype: float64\nCount value of 'Ash': class\n1    59\n2    71\n3    48\nName: Ash, dtype: int64\nMax Value of 'Ash': class\n1    3.22\n2    3.23\n3    2.86\nName: Ash, dtype: float64\nMin Value of 'Ash': class\n1    2.04\n2    1.36\n3    2.10\nName: Ash, dtype: float64\n=========================================================\nTotal sum of 'Alcalinity_of_ash': class\n1    1005.2\n2    1436.9\n3    1028.0\nName: Alcalinity_of_ash, dtype: float64\nStandard Deviation of 'Alcalinity_of_ash': class\n1    2.546322\n2    3.349770\n3    2.258161\nName: Alcalinity_of_ash, dtype: float64\nCount value of 'Alcalinity_of_ash': class\n1    59\n2    71\n3    48\nName: Alcalinity_of_ash, dtype: int64\nMax Value of 'Alcalinity_of_ash': class\n1    25.0\n2    30.0\n3    27.0\nName: Alcalinity_of_ash, dtype: float64\nMin Value of 'Alcalinity_of_ash': class\n1    11.2\n2    10.6\n3    17.5\nName: Alcalinity_of_ash, dtype: float64\n=========================================================\nTotal sum of 'Magnesium': class\n1    6274\n2    6713\n3    4767\nName: Magnesium, dtype: int64\nStandard Deviation of 'Magnesium': class\n1    10.498949\n2    16.753497\n3    10.890473\nName: Magnesium, dtype: float64\nCount value of 'Magnesium': class\n1    59\n2    71\n3    48\nName: Magnesium, dtype: int64\nMax Value of 'Magnesium': class\n1    132\n2    162\n3    123\nName: Magnesium, dtype: int64\nMin Value of 'Magnesium': class\n1    89\n2    70\n3    80\nName: Magnesium, dtype: int64\n=========================================================\nTotal sum of 'Total_phenols': class\n1    167.57\n2    160.38\n3     80.58\nName: Total_phenols, dtype: float64\nStandard Deviation of 'Total_phenols': class\n1    0.338961\n2    0.545361\n3    0.356971\nName: Total_phenols, dtype: float64\nCount value of 'Total_phenols': class\n1    59\n2    71\n3    48\nName: Total_phenols, dtype: int64\nMax Value of 'Total_phenols': class\n1    3.88\n2    3.52\n3    2.80\nName: Total_phenols, dtype: float64\nMin Value of 'Total_phenols': class\n1    2.20\n2    1.10\n3    0.98\nName: Total_phenols, dtype: float64\n=========================================================\nTotal sum of 'Flavanoids': class\n1    175.96\n2    147.74\n3     37.51\nName: Flavanoids, dtype: float64\nStandard Deviation of 'Flavanoids': class\n1    0.397494\n2    0.705701\n3    0.293504\nName: Flavanoids, dtype: float64\nCount value of 'Flavanoids': class\n1    59\n2    71\n3    48\nName: Flavanoids, dtype: int64\nMax Value of 'Flavanoids': class\n1    3.93\n2    5.08\n3    1.57\nName: Flavanoids, dtype: float64\nMin Value of 'Flavanoids': class\n1    2.19\n2    0.57\n3    0.34\nName: Flavanoids, dtype: float64\n=========================================================\nTotal sum of 'Nonflavanoid_phenols': class\n1    17.11\n2    25.82\n3    21.48\nName: Nonflavanoid_phenols, dtype: float64\nStandard Deviation of 'Nonflavanoid_phenols': class\n1    0.070049\n2    0.123961\n3    0.124140\nName: Nonflavanoid_phenols, dtype: float64\nCount value of 'Nonflavanoid_phenols': class\n1    59\n2    71\n3    48\nName: Nonflavanoid_phenols, dtype: int64\nMax Value of 'Nonflavanoid_phenols': class\n1    0.50\n2    0.66\n3    0.63\nName: Nonflavanoid_phenols, dtype: float64\nMin Value of 'Nonflavanoid_phenols': class\n1    0.17\n2    0.13\n3    0.17\nName: Nonflavanoid_phenols, dtype: float64\n=========================================================\nTotal sum of 'Proanthocyanins': class\n1    112.06\n2    115.75\n3     55.37\nName: Proanthocyanins, dtype: float64\nStandard Deviation of 'Proanthocyanins': class\n1    0.412109\n2    0.602068\n3    0.408836\nName: Proanthocyanins, dtype: float64\nCount value of 'Proanthocyanins': class\n1    59\n2    71\n3    48\nName: Proanthocyanins, dtype: int64\nMax Value of 'Proanthocyanins': class\n1    2.96\n2    3.58\n3    2.70\nName: Proanthocyanins, dtype: float64\nMin Value of 'Proanthocyanins': class\n1    1.25\n2    0.41\n3    0.55\nName: Proanthocyanins, dtype: float64\n=========================================================\nTotal sum of 'Color_intensity': class\n1    326.170000\n2    219.150000\n3    355.019999\nName: Color_intensity, dtype: float64\nStandard Deviation of 'Color_intensity': class\n1    1.238573\n2    0.924929\n3    2.310942\nName: Color_intensity, dtype: float64\nCount value of 'Color_intensity': class\n1    59\n2    71\n3    48\nName: Color_intensity, dtype: int64\nMax Value of 'Color_intensity': class\n1     8.9\n2     6.0\n3    13.0\nName: Color_intensity, dtype: float64\nMin Value of 'Color_intensity': class\n1    3.52\n2    1.28\n3    3.85\nName: Color_intensity, dtype: float64\n=========================================================\nTotal sum of 'Hue': class\n1    62.660\n2    74.996\n3    32.770\nName: Hue, dtype: float64\nStandard Deviation of 'Hue': class\n1    0.116483\n2    0.202937\n3    0.114441\nName: Hue, dtype: float64\nCount value of 'Hue': class\n1    59\n2    71\n3    48\nName: Hue, dtype: int64\nMax Value of 'Hue': class\n1    1.28\n2    1.71\n3    0.96\nName: Hue, dtype: float64\nMin Value of 'Hue': class\n1    0.82\n2    0.69\n3    0.48\nName: Hue, dtype: float64\n=========================================================\nTotal sum of '0D280_0D315_of_diluted_wines': class\n1    186.31\n2    197.76\n3     80.81\nName: 0D280_0D315_of_diluted_wines, dtype: float64\nStandard Deviation of '0D280_0D315_of_diluted_wines': class\n1    0.357077\n2    0.496573\n3    0.272111\nName: 0D280_0D315_of_diluted_wines, dtype: float64\nCount value of '0D280_0D315_of_diluted_wines': class\n1    59\n2    71\n3    48\nName: 0D280_0D315_of_diluted_wines, dtype: int64\nMax Value of '0D280_0D315_of_diluted_wines': class\n1    4.00\n2    3.69\n3    2.47\nName: 0D280_0D315_of_diluted_wines, dtype: float64\nMin Value of '0D280_0D315_of_diluted_wines': class\n1    2.51\n2    1.59\n3    1.27\nName: 0D280_0D315_of_diluted_wines, dtype: float64\n=========================================================\nTotal sum of 'Proline': class\n1    65827\n2    36885\n3    30235\nName: Proline, dtype: int64\nStandard Deviation of 'Proline': class\n1    221.520767\n2    157.211220\n3    115.097043\nName: Proline, dtype: float64\nCount value of 'Proline': class\n1    59\n2    71\n3    48\nName: Proline, dtype: int64\nMax Value of 'Proline': class\n1    1680\n2     985\n3     880\nName: Proline, dtype: int64\nMin Value of 'Proline': class\n1    680\n2    278\n3    415\nName: Proline, dtype: int64"
  },
  {
    "objectID": "posts/ploting/wine_data.html#histogram-plot",
    "href": "posts/ploting/wine_data.html#histogram-plot",
    "title": "Report on Wine Data",
    "section": "",
    "text": "Histogram plot for wine data set\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\ndata = pd.read_csv('wine.data', delimiter=',', engine='python' )\ndata.to_excel('wine.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n#numeric_columns = data.select_dtypes(include=['number'])\n#print(numeric_columns)\n\n\ndef histogram_plot(data):\n        # Plot histogram for each numeric column\n            for column in columns:\n                for name, group in grpdata:\n                    plt.figure(figsize=(6,4))\n                    class_name = name if isinstance(name, str) else name[0]\n                    print(\"class\" , class_name)\n                    plt.hist(group[column], bins=80, alpha=0.7, label=column)\n                    plt.xlabel(column)\n                    plt.ylabel('Frequency')\n                    plt.title(f'Histogram of {column}')\n                    plt.show()\n\n# Call the function with the data\nhistogram_plot(data)\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3\n\n\n\n\n\n\n\n\n\nclass 1\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\nclass 3"
  },
  {
    "objectID": "posts/ploting/wine_data.html#scatter-plot",
    "href": "posts/ploting/wine_data.html#scatter-plot",
    "title": "Report on Wine Data",
    "section": "",
    "text": "Scatter plot for iris data set\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('wine.data', delimiter=',', engine='python' )\ndata.to_excel('wine.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n    #print(data)\n\ndef scatter_plot(data):\n    colors = ['r', 'g', 'b']  # Define more colors if there are more than 2 classes\n\n    for column1 in columns:\n        for column2 in columns:\n            if column1 != column2:\n                plt.figure(figsize=(7,7))  # Create a larger figure for better visualization\n                for name, group in grpdata:\n                    color_map = colors[:len(grpdata)]\n                    plt.scatter(group[column1], group[column2], label=f' \"class\"{name}')\n                plt.title(f\"Scatter Plot of {column1} and {column2}\")\n                plt.xlabel(column1)\n                plt.ylabel(column2)\n                plt.legend()\n                plt.grid(True)\n                plt.show()\n\n\nscatter_plot(data)"
  },
  {
    "objectID": "posts/ploting/wine_data.html#line-plot",
    "href": "posts/ploting/wine_data.html#line-plot",
    "title": "Report on Wine Data",
    "section": "",
    "text": "Line plot for wine data set\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('wine.data', delimiter=',', engine='python' )\ndata.to_excel('wine.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n    #print(data)\n\ndef line_plot(data):\n    # Select only numeric columns\n    #numeric_columns = data.select_dtypes(include=['number']).columns\n    # Plot histogram for each numeric column\n    for name, group in grpdata:\n        class_name = name if isinstance(name, str) else name[0]\n        print(\"class\", class_name)\n        for column in columns:\n                plt.figure(figsize=(6, 4))\n                plt.plot(group.index, group[column], color='green' , label=column, linestyle='-', marker='o')\n                plt.title('Line Plot')\n                plt.xlabel('Index')\n                plt.ylabel(column)\n                plt.legend()\n                plt.grid(True)\n                plt.show()\n\nline_plot(data)\n\n\nclass 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass 3"
  },
  {
    "objectID": "posts/ploting/wine_data.html#box-plot",
    "href": "posts/ploting/wine_data.html#box-plot",
    "title": "Report on Wine Data",
    "section": "",
    "text": "Box plot for iris data set\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('wine.data', delimiter=',', engine='python' )\ndata.to_excel('wine.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n    #print(data)\n\ndef box_plot(data):\n    for name, group in grpdata:\n        class_name = name if isinstance(name, str) else name[0]\n        print(\"class\" , class_name)\n        for column in columns:\n            plt.figure(figsize=(6, 4))\n            plt.boxplot(group[column])   #, tick_labels=numeric_columns\n            plt.title('Box Plot')\n            plt.xlabel(column)\n            plt.ylabel('Values')\n            plt.grid()\n            plt.show()\n\nbox_plot(data)\n\n\nclass 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass 3"
  },
  {
    "objectID": "posts/ploting/iris_data.html#about-iris-data",
    "href": "posts/ploting/iris_data.html#about-iris-data",
    "title": "Report on Iris Data",
    "section": "",
    "text": "The Iris data consists of measurements of iris flowers from three different species: Iris-setosa, Iris-versicolor, and Iris-virginica.\n\n\nClass: The class refers to the species of the iris flower: Iris-setosa, Iris-versicolor, Iris-virginica,\nFeatures: Sepal length, Sepal width, Petal length and Petal width.\n\n\n\nSepal Length: Length of the sepal in centimeters. Ranges from 4.3 to 7.9 cm in the dataset. Shows the length of the flower’s sepal.\nSepal Width: Width of the sepal in centimeters. Ranges from 2.0 to 4.4 cm in the dataset. Shows the width of the flower’s sepal.\nPetal Length: Length of the petal in centimeters. Ranges from 1.0 to 6.9 cm in the dataset. Shows the length of the flower’s petal.\nPetal Width: Width of the petal in centimeters. Ranges from 0.1 to 2.5 cm in the dataset. Shows the width of the flower’s petal.\n\n\n\nIris-setosa: Typically has smaller sepal lengths and widths compared to other species. Petal lengths and widths are also smaller.\nIris-versicolor: Intermediate measurements compared to the other two species. Sepal lengths and widths are moderate, and petal sizes are moderate as well.\nIris-virginica: Generally has larger sepal and petal measurements. Sepal lengths and widths are the largest in the dataset. Petal lengths and widths are also the largest."
  },
  {
    "objectID": "posts/ploting/iris_data.html#dataset-structure",
    "href": "posts/ploting/iris_data.html#dataset-structure",
    "title": "Report on Iris Data",
    "section": "Dataset Structure",
    "text": "Dataset Structure\nClass: The class refers to the species of the iris flower: Iris-setosa, Iris-versicolor, Iris-virginica,\nFeatures: Sepal length, Sepal width, Petal length and Petal width."
  },
  {
    "objectID": "posts/ploting/iris_data.html#class",
    "href": "posts/ploting/iris_data.html#class",
    "title": "Report on Iris Data",
    "section": "Class:",
    "text": "Class:\nClass: The class refers to the species of the iris flower.\nIris-setosa Iris-versicolor Iris-virginica"
  },
  {
    "objectID": "posts/ploting/iris_data.html#features",
    "href": "posts/ploting/iris_data.html#features",
    "title": "Report on Iris Data",
    "section": "Features:",
    "text": "Features:\nSepal length, Sepal width, Petal length, Petal width,"
  },
  {
    "objectID": "posts/ploting/iris_data.html#features-explanation",
    "href": "posts/ploting/iris_data.html#features-explanation",
    "title": "Report on Iris Data",
    "section": "Features Explanation",
    "text": "Features Explanation\nSepal Length: Length of the sepal in centimeters. Ranges from 4.3 to 7.9 cm in the dataset. Shows the length of the flower’s sepal.\nSepal Width: Width of the sepal in centimeters. Ranges from 2.0 to 4.4 cm in the dataset. Shows the width of the flower’s sepal.\nPetal Length: Length of the petal in centimeters. Ranges from 1.0 to 6.9 cm in the dataset. Shows the length of the flower’s petal.\nPetal Width: Width of the petal in centimeters. Ranges from 0.1 to 2.5 cm in the dataset. Shows the width of the flower’s petal."
  },
  {
    "objectID": "posts/ploting/iris_data.html#species-breakdown",
    "href": "posts/ploting/iris_data.html#species-breakdown",
    "title": "Report on Iris Data",
    "section": "Species Breakdown",
    "text": "Species Breakdown\nIris-setosa: Typically has smaller sepal lengths and widths compared to other species. Petal lengths and widths are also smaller.\nIris-versicolor: Intermediate measurements compared to the other two species. Sepal lengths and widths are moderate, and petal sizes are moderate as well.\nIris-virginica: Generally has larger sepal and petal measurements. Sepal lengths and widths are the largest in the dataset. Petal lengths and widths are also the largest."
  },
  {
    "objectID": "posts/ploting/iris_data.html#iris",
    "href": "posts/ploting/iris_data.html#iris",
    "title": "Report on Iris Data",
    "section": "",
    "text": "The data consists of measurements of iris flowers from three different species: Iris-setosa, Iris-versicolor, and Iris-virginica."
  },
  {
    "objectID": "posts/ploting/iris_data.html#about-histogram-plot",
    "href": "posts/ploting/iris_data.html#about-histogram-plot",
    "title": "Report on Iris Data",
    "section": "About Histogram Plot",
    "text": "About Histogram Plot\nEach histogram provides a visual of how the measurements of a specific feature (sepal length, sepal width, petal length, or petal width) are distributed across the three iris species:"
  },
  {
    "objectID": "posts/ploting/iris_data.html#iris-setosa",
    "href": "posts/ploting/iris_data.html#iris-setosa",
    "title": "Report on Iris Data",
    "section": "Iris-setosa",
    "text": "Iris-setosa\nSepal Length: Typically has shorter sepal lengths compared to the other species. The histogram for Iris-setosa might show a peak in the lower range of sepal lengths, indicating that most of its samples have shorter sepals.\nSepal Width: Often has wider sepals compared to Iris-versicolor and Iris-virginica. The histogram for Iris-setosa might show higher frequencies in the wider range of sepal widths, indicating that most of its samples have broader sepals.\nPetal Length: Characterized by relatively short petals. The histogram for Iris-setosa would show a peak in the lower range of petal lengths, reflecting that most samples have short petals.\nPetal Width: Has relatively narrow petals. The histogram for Iris-setosa would show a peak in the lower range of petal widths, indicating that the petal width is generally smaller."
  },
  {
    "objectID": "posts/ploting/iris_data.html#iris-versicolor",
    "href": "posts/ploting/iris_data.html#iris-versicolor",
    "title": "Report on Iris Data",
    "section": "Iris-versicolor",
    "text": "Iris-versicolor\nSepal Length: The sepal lengths for Iris-versicolor are generally intermediate between Iris-setosa and Iris-virginica. Its histogram might show a moderate range of sepal lengths, with some overlap with Iris-setosa but not extending as far as Iris-virginica.\nSepal Width: Typically has intermediate sepal widths. The histogram might show a narrower range of widths compared to Iris-setosa but wider than Iris-virginica.\nPetal Length: Displays intermediate petal lengths. The histogram might show a distribution with moderate petal lengths, indicating that the petal length is neither too short nor too long.\nPetal Width: Exhibits intermediate petal widths. The histogram might show a more balanced distribution, with petal widths being neither too narrow nor too wide."
  },
  {
    "objectID": "posts/ploting/iris_data.html#iris-virginica",
    "href": "posts/ploting/iris_data.html#iris-virginica",
    "title": "Report on Iris Data",
    "section": "Iris-virginica",
    "text": "Iris-virginica\nSepal Length: Usually has the longest sepals of the three species. The histogram for Iris-virginica would likely show a peak in the higher range of sepal lengths, indicating that this species tends to have longer sepals.\nSepal Width: Generally has the narrowest sepals. The histogram for Iris-virginica might show peaks in the lower range of sepal widths, indicating that its samples tend to have narrower sepals.\nPetal Length: Known for having the longest petals among the species. The histogram for Iris-virginica would likely show a peak in the higher range of petal lengths, indicating that this species typically has longer petals.\nPetal Width: Typically has the widest petals. The histogram for Iris-virginica would likely show a peak in the higher range of petal widths, indicating that this species tends to have broader petals."
  },
  {
    "objectID": "posts/ploting/iris_data.html#about-scatter-plot",
    "href": "posts/ploting/iris_data.html#about-scatter-plot",
    "title": "Report on Iris Data",
    "section": "About Scatter Plot",
    "text": "About Scatter Plot\nA scatter plot displays the relationship between two variables by using Cartesian coordinates. For the Iris dataset, scatter plots can be used to visualize the relationships between different pairs of features (sepal length, sepal width, petal length, and petal width) for each species of iris flowers (Iris-setosa, Iris-versicolor, and Iris-virginica)."
  },
  {
    "objectID": "posts/ploting/iris_data.html#key-observations-in-scatter-plots",
    "href": "posts/ploting/iris_data.html#key-observations-in-scatter-plots",
    "title": "Report on Iris Data",
    "section": "Key Observations in Scatter Plots",
    "text": "Key Observations in Scatter Plots\nDistinct Clusters for Each Species:\nIris-setosa: Typically forms a distinct cluster, often separable from the other species due to its unique feature measurements.\nIris-versicolor: May overlap with both Iris-setosa and Iris-virginica but generally forms its own cluster in the feature space.\nIris-virginica: Often has the largest values for petal length and width, forming a cluster that may overlap with Iris-versicolor but is distinguishable from Iris-setosa.\nPatterns and Relationships:\nSepal Length vs. Sepal Width: This scatter plot can show how these two features correlate for each species. For example, Iris-setosa might show a specific pattern or cluster distinct from the other two species.\nPetal Length vs. Petal Width: This is a particularly important plot as it often shows clear separation between the three species. Iris-setosa, having the smallest petal measurements, typically forms a separate cluster, while Iris-virginica, with the largest petals, forms another distinct group.\nSepal vs. Petal Dimensions: Plots like sepal length vs. petal length can reveal how these dimensions correlate within and across species, showing trends or clusters that help in distinguishing the species."
  },
  {
    "objectID": "posts/ploting/iris_data.html#example-insights",
    "href": "posts/ploting/iris_data.html#example-insights",
    "title": "Report on Iris Data",
    "section": "Example Insights:",
    "text": "Example Insights:\nIris-setosa:\nPetal Length vs. Petal Width: This scatter plot often shows a clear cluster for Iris-setosa with smaller values, distinct from the other two species. Sepal Length vs. Sepal Width: Iris-setosa typically has a unique pattern, often forming a tight cluster that is easy to identify.\nIris-versicolor:\nPetal Length vs. Petal Width: The values for Iris-versicolor are usually intermediate, and the scatter plot might show some overlap with Iris-virginica but is generally separable. Sepal Length vs. Petal Length: This plot can help show the intermediate nature of Iris-versicolor’s features, forming a bridge between Iris-setosa and Iris-virginica.\nIris-virginica:\nPetal Length vs. Petal Width: Iris-virginica typically has the largest petal measurements, forming a distinct cluster on the higher end of the scatter plot. Sepal Width vs. Petal Width: This plot can reveal how the wider petals and sepals of Iris-virginica compare to the other species.\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('iris.data', delimiter=',', engine='python' )\ndata.to_excel('iris.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class']    \ngrpdata = data.groupby([\"class\"])\n    #print(data)\n\ndef scatter_plot(data):\n    colors = ['r', 'g', 'b']  # Define more colors if there are more than 2 classes\n\n    for column1 in columns:\n        for column2 in columns:\n            if column1 != column2:\n                plt.figure(figsize=(7,7))  # Create a larger figure for better visualization\n                for name, group in grpdata:\n                    color_map = colors[:len(grpdata)]\n                    class_name = name if isinstance(name, str) else name[0]\n                    plt.scatter(group[column1], group[column2], label=class_name)\n                plt.title(f\"Scatter Plot of {column1} and {column2}\")\n                plt.xlabel(column1)\n                plt.ylabel(column2)\n                plt.legend()\n                plt.grid(True)\n                plt.show()\n\n\n\nscatter_plot(data)"
  },
  {
    "objectID": "posts/ploting/iris_data.html#box-plot-explanation-for-iris-dataset",
    "href": "posts/ploting/iris_data.html#box-plot-explanation-for-iris-dataset",
    "title": "Report on Iris Data",
    "section": "Box Plot Explanation for Iris Dataset",
    "text": "Box Plot Explanation for Iris Dataset\nA box plot (or box-and-whisker plot) is a standardized way of displaying the distribution of data based on a five-number summary: minimum, first quartile (Q1), median (Q2), third quartile (Q3), and maximum. It’s particularly useful for comparing distributions between several groups or datasets.\n\nKey Elements of a Box Plot\nBox:\nFirst Quartile (Q1): This is the value below which 25% of the data fall. It marks the lower end of the box. Median (Q2): This is the middle value of the dataset, dividing it into two equal halves. It is represented by the line inside the box. Third Quartile (Q3): This is the value below which 75% of the data fall. It marks the upper end of the box.\nWhiskers:\nThe whiskers extend from the ends of the box to the minimum and maximum values in the data that are not considered outliers. Typically, these whiskers extend to 1.5 times the interquartile range (IQR) from Q1 and Q3, respectively.\nOutliers:\nPoints that fall outside of the whiskers are considered outliers and are often plotted as individual dots.\n\n\nInterpreting Box Plots for Iris Dataset Features\n1. Sepal Length\nIris-setosa:\nThe box plot for sepal length in Iris-setosa shows a relatively tight range, indicating less variability within this feature for this species. The median sepal length is on the shorter side compared to the other species.\nIris-versicolor:\nThis species has a wider range of sepal lengths compared to Iris-setosa, as indicated by a larger IQR. The median sepal length is intermediate, reflecting its position between Iris-setosa and Iris-virginica.\nIris-virginica:\nThe box plot for Iris-virginica shows the longest sepal lengths among the three species, with a higher median and a wider spread. This indicates more variability in sepal lengths within this species.\n2. Sepal Width\nIris-setosa:\nThe box plot for sepal width in Iris-setosa often shows wider sepals compared to the other species. The IQR and median reflect this, with less variability compared to sepal length.\nIris-versicolor:\nIris-versicolor has a more moderate range of sepal widths, with a median that is generally narrower than that of Iris-setosa but broader than Iris-virginica.\nIris-virginica:\nThe box plot for Iris-virginica typically shows the narrowest sepals. The median and IQR indicate this tendency, with the whiskers showing some overlap with the sepal widths of Iris-versicolor.\n3. Petal Length\nIris-setosa:\nPetal length for Iris-setosa is quite short and has the least variability among the three species, as shown by a tight IQR and lower median value.\nIris-versicolor:\nIris-versicolor shows a wider range of petal lengths, with an intermediate median value. The box plot reflects greater variability compared to Iris-setosa.\nIris-virginica:\nThis species has the longest petal lengths, with the highest median and a wide IQR. The variability is also the greatest among the three species, as indicated by the spread of the whiskers.\n4. Petal Width\nIris-setosa:\nThe box plot for petal width in Iris-setosa shows narrow petals with low variability. The median and IQR reflect this, indicating that most samples have narrow petals.\nIris-versicolor:\nIris-versicolor has an intermediate range of petal widths, with a median and IQR that suggest more variability compared to Iris-setosa but less than Iris-virginica.\nIris-virginica:\nThe box plot for Iris-virginica shows the widest petals with a high median value. The spread of the data is larger, indicating more variability within this feature for this species.\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('iris.data', delimiter=',', engine='python' )\ndata.to_excel('iris.xlsx', index=False)\ncolumns = data.columns[data.columns != 'class'] \ngrpdata = data.groupby([\"class\"])\n    #print(data)\n\ndef box_plot(data):\n    # Select only numeric columns\n    #numeric_columns = data.select_dtypes(include=['number']).columns\n    # Plot histogram for each numeric column\n    #numeric_data = data.select_dtypes(include='number')\n    #print(numeric_data)\n    for name, group in grpdata:\n        class_name = name if isinstance(name, str) else name[0]\n        print(class_name)\n        for column in columns:\n            plt.figure(figsize=(6, 4))\n            plt.boxplot(group[column])   #, tick_labels=numeric_columns\n            plt.title('Box Plot')\n            plt.xlabel(column)\n            plt.ylabel('Values')\n            plt.grid()\n            plt.show()\n\nbox_plot(data)\n\n\nIris-setosa\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIris-versicolor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIris-virginica"
  },
  {
    "objectID": "posts/ploting/wine_data.html#about-wine-data",
    "href": "posts/ploting/wine_data.html#about-wine-data",
    "title": "Report on Wine Data",
    "section": "",
    "text": "The Wine data consists of measurements of various chemical properties of different types of wine. It is organized in a tabular format with multiple columns, each representing a specific property, and rows representing different wine samples."
  },
  {
    "objectID": "posts/ploting/wine_data.html#data-structure",
    "href": "posts/ploting/wine_data.html#data-structure",
    "title": "Report on Wine Data",
    "section": "",
    "text": "Columns in wine data:\nclass: Class label (1, 2, or 3) representing different types of wine. Alcohol Malicacid Ash Alcalinity_of_ash Magnesium Total_phenols Flavanoids Nonflavanoid_phenols Proanthocyanins Color_intensity Hue 0D280_0D315_of_diluted_wines Proline"
  },
  {
    "objectID": "posts/linear regression/linear.html",
    "href": "posts/linear regression/linear.html",
    "title": "Building a Model Using Linear Regression for Car Price Prediction and Data Analysis",
    "section": "",
    "text": "The dataset consists of various attributes related to different car models, such as their specifications, performance metrics, and price. Goal is to analyze and model this data to understand the factors that influence car prices and to predict the price of a car based on its features.\nTaken a CSV file containing accurate historical data, which includes features and their actual prices. Task is to use this data to build a model that can predict the prices of cars that are not part of this dataset. The goal is to develop a reliable predictive model that can estimate the selling price of any car based on its features.\n\n\nCode\nimport pandas as pd\ndata = pd.read_csv('imports-85.data', delimiter=',', engine='python' )\nprint(data.head())\n\n\n   class normalized-losses         make fuel-type aspiration num-of-doors  \\\n0      3                 ?  alfa-romero       gas        std          two   \n1      3                 ?  alfa-romero       gas        std          two   \n2      1                 ?  alfa-romero       gas        std          two   \n3      2               164         audi       gas        std         four   \n4      2               164         audi       gas        std         four   \n\n    body-style drive-wheels engine-location  wheel-base  ...  engine-size  \\\n0  convertible          rwd           front        88.6  ...          130   \n1  convertible          rwd           front        88.6  ...          130   \n2    hatchback          rwd           front        94.5  ...          152   \n3        sedan          fwd           front        99.8  ...          109   \n4        sedan          4wd           front        99.4  ...          136   \n\n   fuel-system  bore  stroke compression-ratio horsepower  peak-rpm city-mpg  \\\n0         mpfi  3.47    2.68               9.0        111      5000       21   \n1         mpfi  3.47    2.68               9.0        111      5000       21   \n2         mpfi  2.68    3.47               9.0        154      5000       19   \n3         mpfi  3.19    3.40              10.0        102      5500       24   \n4         mpfi  3.19    3.40               8.0        115      5500       18   \n\n  highway-mpg  price  \n0          27  13495  \n1          27  16500  \n2          26  16500  \n3          30  13950  \n4          22  17450  \n\n[5 rows x 26 columns]"
  },
  {
    "objectID": "posts/linear regression/linear.html#problem-statement",
    "href": "posts/linear regression/linear.html#problem-statement",
    "title": "Building a Model Using Linear Regression for Car Price Prediction and Data Analysis",
    "section": "",
    "text": "The dataset consists of various attributes related to different car models, such as their specifications, performance metrics, and price. Goal is to analyze and model this data to understand the factors that influence car prices and to predict the price of a car based on its features.\nTaken a CSV file containing accurate historical data, which includes features and their actual prices. Task is to use this data to build a model that can predict the prices of cars that are not part of this dataset. The goal is to develop a reliable predictive model that can estimate the selling price of any car based on its features.\n\n\nCode\nimport pandas as pd\ndata = pd.read_csv('imports-85.data', delimiter=',', engine='python' )\nprint(data.head())\n\n\n   class normalized-losses         make fuel-type aspiration num-of-doors  \\\n0      3                 ?  alfa-romero       gas        std          two   \n1      3                 ?  alfa-romero       gas        std          two   \n2      1                 ?  alfa-romero       gas        std          two   \n3      2               164         audi       gas        std         four   \n4      2               164         audi       gas        std         four   \n\n    body-style drive-wheels engine-location  wheel-base  ...  engine-size  \\\n0  convertible          rwd           front        88.6  ...          130   \n1  convertible          rwd           front        88.6  ...          130   \n2    hatchback          rwd           front        94.5  ...          152   \n3        sedan          fwd           front        99.8  ...          109   \n4        sedan          4wd           front        99.4  ...          136   \n\n   fuel-system  bore  stroke compression-ratio horsepower  peak-rpm city-mpg  \\\n0         mpfi  3.47    2.68               9.0        111      5000       21   \n1         mpfi  3.47    2.68               9.0        111      5000       21   \n2         mpfi  2.68    3.47               9.0        154      5000       19   \n3         mpfi  3.19    3.40              10.0        102      5500       24   \n4         mpfi  3.19    3.40               8.0        115      5500       18   \n\n  highway-mpg  price  \n0          27  13495  \n1          27  16500  \n2          26  16500  \n3          30  13950  \n4          22  17450  \n\n[5 rows x 26 columns]"
  },
  {
    "objectID": "posts/linear regression/linear.html#import-libraries",
    "href": "posts/linear regression/linear.html#import-libraries",
    "title": "Building a Model Using Linear Regression for Car Price Prediction and Data Analysis",
    "section": "Import Libraries",
    "text": "Import Libraries\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, r2_score\nimport seaborn as sns\nimport statsmodels.api as sm\n\n\n\n\n\nLibraries"
  },
  {
    "objectID": "posts/linear regression/linear.html#analysis-and-visualization",
    "href": "posts/linear regression/linear.html#analysis-and-visualization",
    "title": "Building a Model Using Linear Regression for Car Price Prediction and Data Analysis",
    "section": "Analysis and Visualization",
    "text": "Analysis and Visualization\nIn order to understand the data that’s available, we must perform data analysis by visualizing the distribution of values in each feature, and the relationships between price and other features.\n\n\nCode\nprint(data)\n\n\n     class normalized-losses         make fuel-type aspiration num-of-doors  \\\n0        3                 ?  alfa-romero       gas        std          two   \n1        3                 ?  alfa-romero       gas        std          two   \n2        1                 ?  alfa-romero       gas        std          two   \n3        2               164         audi       gas        std         four   \n4        2               164         audi       gas        std         four   \n..     ...               ...          ...       ...        ...          ...   \n200     -1                95        volvo       gas        std         four   \n201     -1                95        volvo       gas      turbo         four   \n202     -1                95        volvo       gas        std         four   \n203     -1                95        volvo    diesel      turbo         four   \n204     -1                95        volvo       gas      turbo         four   \n\n      body-style drive-wheels engine-location  wheel-base  ...  engine-size  \\\n0    convertible          rwd           front        88.6  ...          130   \n1    convertible          rwd           front        88.6  ...          130   \n2      hatchback          rwd           front        94.5  ...          152   \n3          sedan          fwd           front        99.8  ...          109   \n4          sedan          4wd           front        99.4  ...          136   \n..           ...          ...             ...         ...  ...          ...   \n200        sedan          rwd           front       109.1  ...          141   \n201        sedan          rwd           front       109.1  ...          141   \n202        sedan          rwd           front       109.1  ...          173   \n203        sedan          rwd           front       109.1  ...          145   \n204        sedan          rwd           front       109.1  ...          141   \n\n     fuel-system  bore  stroke compression-ratio horsepower  peak-rpm  \\\n0           mpfi  3.47    2.68               9.0        111      5000   \n1           mpfi  3.47    2.68               9.0        111      5000   \n2           mpfi  2.68    3.47               9.0        154      5000   \n3           mpfi  3.19    3.40              10.0        102      5500   \n4           mpfi  3.19    3.40               8.0        115      5500   \n..           ...   ...     ...               ...        ...       ...   \n200         mpfi  3.78    3.15               9.5        114      5400   \n201         mpfi  3.78    3.15               8.7        160      5300   \n202         mpfi  3.58    2.87               8.8        134      5500   \n203          idi  3.01    3.40              23.0        106      4800   \n204         mpfi  3.78    3.15               9.5        114      5400   \n\n    city-mpg highway-mpg  price  \n0         21          27  13495  \n1         21          27  16500  \n2         19          26  16500  \n3         24          30  13950  \n4         18          22  17450  \n..       ...         ...    ...  \n200       23          28  16845  \n201       19          25  19045  \n202       18          23  21485  \n203       26          27  22470  \n204       19          25  22625  \n\n[205 rows x 26 columns]\n\n\nThe dataset contains 205 rows and 26 columns. Each row in the dataset contains information about one car. The task is to find a way to estimate the value in the “Price” column using the values in the other columns. If we can do this estimation for historical data, then we should be able to estimate price for new cars that are not in this data too, simply by providing information like class, normalized-losses, make, fuel-type, aspiration,num-of-doors, body-style, drive-wheels, engine-location, wheel-base, length, width,height,curb-weight, engine-type, num-of-cylinders, engine-size, fuel-system, bore,stroke,compression-ratio, horsepower, peak-rpm, city-mpg, highway-mpg."
  },
  {
    "objectID": "posts/linear regression/linear.html#data-cleaning-and-preprocessing",
    "href": "posts/linear regression/linear.html#data-cleaning-and-preprocessing",
    "title": "Building a Model Using Linear Regression for Car Price Prediction and Data Analysis",
    "section": "Data Cleaning and Preprocessing:",
    "text": "Data Cleaning and Preprocessing:\n\nHandle missing values in columns such as normalized-losses and price.\nConvert categorical data into numerical formats.\n\n\n\nCode\n# Handle missing data\nimport pandas as pd\ndata = pd.read_csv('imports-85.data', delimiter=',')\ndata.replace(\"?\",'', inplace=True)\n#print(data)\nfeature_columns = ['horsepower','bore','stroke','normalized-losses', 'price', 'peak-rpm']\n# Convert selected columns to numeric (if they aren't already)\nfor col in feature_columns:\n        data[col] = pd.to_numeric(data[col], errors='coerce')\n#print(data)\n\n\nIn the dataset, some columns such as price and horsepower contain “?”. Because of this, the columns are considered as objects, even though they contain numeric values. To overcome this issue, we should replace ? with an empty string, and then convert the object columns to numeric using the pd.to_numeric function.\n\nLet’s check the data type of each column\n\n\nCode\ndata.info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 205 entries, 0 to 204\nData columns (total 26 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   class              205 non-null    int64  \n 1   normalized-losses  164 non-null    float64\n 2   make               205 non-null    object \n 3   fuel-type          205 non-null    object \n 4   aspiration         205 non-null    object \n 5   num-of-doors       205 non-null    object \n 6   body-style         205 non-null    object \n 7   drive-wheels       205 non-null    object \n 8   engine-location    205 non-null    object \n 9   wheel-base         205 non-null    float64\n 10  length             205 non-null    float64\n 11  width              205 non-null    float64\n 12  height             205 non-null    float64\n 13  curb-weight        205 non-null    int64  \n 14  engine-type        205 non-null    object \n 15  num-of-cylinders   205 non-null    object \n 16  engine-size        205 non-null    int64  \n 17  fuel-system        205 non-null    object \n 18  bore               201 non-null    float64\n 19  stroke             201 non-null    float64\n 20  compression-ratio  205 non-null    float64\n 21  horsepower         203 non-null    float64\n 22  peak-rpm           203 non-null    float64\n 23  city-mpg           205 non-null    int64  \n 24  highway-mpg        205 non-null    int64  \n 25  price              201 non-null    float64\ndtypes: float64(11), int64(5), object(10)\nmemory usage: 41.8+ KB\n\n\nWe could see that class, normalized-losses, wheel-base, length, width, height, curb-weight, engine-size, bore,stroke, compression-ratio, horsepower, peak-rpm, city-mpg, highway-mpg, price are numeric whereas make, fuel-type, aspiration,num-of-doors, body-style, drive-wheels, engine-location, engine-type, num-of-cylinders, fuel-system are objects( string) possibly categorical columns.\n\n\nExplore some statistics for the numerical columns:\n\n\nCode\ndata.describe()\n\n\n\n\n\n\n\n\n\nclass\nnormalized-losses\nwheel-base\nlength\nwidth\nheight\ncurb-weight\nengine-size\nbore\nstroke\ncompression-ratio\nhorsepower\npeak-rpm\ncity-mpg\nhighway-mpg\nprice\n\n\n\n\ncount\n205.000000\n164.000000\n205.000000\n205.000000\n205.000000\n205.000000\n205.000000\n205.000000\n201.000000\n201.000000\n205.000000\n203.000000\n203.000000\n205.000000\n205.000000\n201.000000\n\n\nmean\n0.834146\n122.000000\n98.756585\n174.049268\n65.907805\n53.724878\n2555.565854\n126.907317\n3.329751\n3.255423\n10.142537\n104.256158\n5125.369458\n25.219512\n30.751220\n13207.129353\n\n\nstd\n1.245307\n35.442168\n6.021776\n12.337289\n2.145204\n2.443522\n520.680204\n41.642693\n0.273539\n0.316717\n3.972040\n39.714369\n479.334560\n6.542142\n6.886443\n7947.066342\n\n\nmin\n-2.000000\n65.000000\n86.600000\n141.100000\n60.300000\n47.800000\n1488.000000\n61.000000\n2.540000\n2.070000\n7.000000\n48.000000\n4150.000000\n13.000000\n16.000000\n5118.000000\n\n\n25%\n0.000000\n94.000000\n94.500000\n166.300000\n64.100000\n52.000000\n2145.000000\n97.000000\n3.150000\n3.110000\n8.600000\n70.000000\n4800.000000\n19.000000\n25.000000\n7775.000000\n\n\n50%\n1.000000\n115.000000\n97.000000\n173.200000\n65.500000\n54.100000\n2414.000000\n120.000000\n3.310000\n3.290000\n9.000000\n95.000000\n5200.000000\n24.000000\n30.000000\n10295.000000\n\n\n75%\n2.000000\n150.000000\n102.400000\n183.100000\n66.900000\n55.500000\n2935.000000\n141.000000\n3.590000\n3.410000\n9.400000\n116.000000\n5500.000000\n30.000000\n34.000000\n16500.000000\n\n\nmax\n3.000000\n256.000000\n120.900000\n208.100000\n72.300000\n59.800000\n4066.000000\n326.000000\n3.940000\n4.170000\n23.000000\n288.000000\n6600.000000\n49.000000\n54.000000\n45400.000000"
  },
  {
    "objectID": "posts/linear regression/linear.html#correlation",
    "href": "posts/linear regression/linear.html#correlation",
    "title": "Building a Model Using Linear Regression for Car Price Prediction and Data Analysis",
    "section": "Correlation",
    "text": "Correlation\nThe relationship between two numerical features such as price and hoursepower etc. can be numerically expressed using a measure called correlation coefficient, which can be computed using the .corr method from the pandas’ library.\nFor example to compute the correlation coefficient of price and hoursepower:\n\nThis is for price and hoursepower.\nLet’s see correlation_coefficient for each numeric feature with price.\n\n\nCode\ncorrelation_coefficient_columns = ['normalized-losses','wheel-base','length','width','height','curb-weight','engine-size','bore','stroke','compression-ratio','horsepower','peak-rpm','city-mpg','highway-mpg']\nfor col in correlation_coefficient_columns:\n    correlation_coefficient = data['price'].corr(data[col])\n    print(f\"Correlation between price and {col}: {correlation_coefficient}\")\n\n\nCorrelation between price and normalized-losses: 0.20325417074184238\nCorrelation between price and wheel-base: 0.5846418222655085\nCorrelation between price and length: 0.6906283804483649\nCorrelation between price and width: 0.7512653440522669\nCorrelation between price and height: 0.13548630756805982\nCorrelation between price and curb-weight: 0.8344145257702834\nCorrelation between price and engine-size: 0.8723351674455196\nCorrelation between price and bore: 0.5434358664188549\nCorrelation between price and stroke: 0.0823098273897049\nCorrelation between price and compression-ratio: 0.07110732668194138\nCorrelation between price and horsepower: 0.8105330821322059\nCorrelation between price and peak-rpm: -0.10164886620219901\nCorrelation between price and city-mpg: -0.686571006784468\nCorrelation between price and highway-mpg: -0.704692265058953\n\n\nWe could observe from the values above, that there’s a high correlation between price and engine-size but less correlation between price and highway-mpg.\nWe can use the .corr() method to show the correlation coefficients between all pairs of numerical columns.\n\n\nCode\ndata.corr(method='pearson',numeric_only=True)\n\n\n\n\n\n\n\n\n\nclass\nnormalized-losses\nwheel-base\nlength\nwidth\nheight\ncurb-weight\nengine-size\nbore\nstroke\ncompression-ratio\nhorsepower\npeak-rpm\ncity-mpg\nhighway-mpg\nprice\n\n\n\n\nclass\n1.000000\n0.528667\n-0.531954\n-0.357612\n-0.232919\n-0.541038\n-0.227691\n-0.105790\n-0.134205\n-0.008965\n-0.178515\n0.071622\n0.274573\n-0.035823\n0.034606\n-0.082391\n\n\nnormalized-losses\n0.528667\n1.000000\n-0.074362\n0.023220\n0.105073\n-0.432335\n0.119893\n0.167365\n-0.036167\n0.065627\n-0.132654\n0.295772\n0.264597\n-0.258502\n-0.210768\n0.203254\n\n\nwheel-base\n-0.531954\n-0.074362\n1.000000\n0.874587\n0.795144\n0.589435\n0.776386\n0.569329\n0.490378\n0.161477\n0.249786\n0.352297\n-0.361052\n-0.470414\n-0.544082\n0.584642\n\n\nlength\n-0.357612\n0.023220\n0.874587\n1.000000\n0.841118\n0.491029\n0.877728\n0.683360\n0.607480\n0.129739\n0.158414\n0.555003\n-0.287325\n-0.670909\n-0.704662\n0.690628\n\n\nwidth\n-0.232919\n0.105073\n0.795144\n0.841118\n1.000000\n0.279210\n0.867032\n0.735433\n0.559204\n0.182956\n0.181129\n0.642482\n-0.219957\n-0.642704\n-0.677218\n0.751265\n\n\nheight\n-0.541038\n-0.432335\n0.589435\n0.491029\n0.279210\n1.000000\n0.295572\n0.067149\n0.176195\n-0.056999\n0.261214\n-0.110711\n-0.322272\n-0.048640\n-0.107358\n0.135486\n\n\ncurb-weight\n-0.227691\n0.119893\n0.776386\n0.877728\n0.867032\n0.295572\n1.000000\n0.850594\n0.649045\n0.168929\n0.151362\n0.751034\n-0.266306\n-0.757414\n-0.797465\n0.834415\n\n\nengine-size\n-0.105790\n0.167365\n0.569329\n0.683360\n0.735433\n0.067149\n0.850594\n1.000000\n0.594090\n0.206675\n0.028971\n0.810773\n-0.244618\n-0.653658\n-0.677470\n0.872335\n\n\nbore\n-0.134205\n-0.036167\n0.490378\n0.607480\n0.559204\n0.176195\n0.649045\n0.594090\n1.000000\n-0.055909\n0.005203\n0.577273\n-0.264269\n-0.594584\n-0.594572\n0.543436\n\n\nstroke\n-0.008965\n0.065627\n0.161477\n0.129739\n0.182956\n-0.056999\n0.168929\n0.206675\n-0.055909\n1.000000\n0.186170\n0.090254\n-0.071493\n-0.042906\n-0.044528\n0.082310\n\n\ncompression-ratio\n-0.178515\n-0.132654\n0.249786\n0.158414\n0.181129\n0.261214\n0.151362\n0.028971\n0.005203\n0.186170\n1.000000\n-0.205874\n-0.436221\n0.324701\n0.265201\n0.071107\n\n\nhorsepower\n0.071622\n0.295772\n0.352297\n0.555003\n0.642482\n-0.110711\n0.751034\n0.810773\n0.577273\n0.090254\n-0.205874\n1.000000\n0.130971\n-0.803620\n-0.770908\n0.810533\n\n\npeak-rpm\n0.274573\n0.264597\n-0.361052\n-0.287325\n-0.219957\n-0.322272\n-0.266306\n-0.244618\n-0.264269\n-0.071493\n-0.436221\n0.130971\n1.000000\n-0.113788\n-0.054257\n-0.101649\n\n\ncity-mpg\n-0.035823\n-0.258502\n-0.470414\n-0.670909\n-0.642704\n-0.048640\n-0.757414\n-0.653658\n-0.594584\n-0.042906\n0.324701\n-0.803620\n-0.113788\n1.000000\n0.971337\n-0.686571\n\n\nhighway-mpg\n0.034606\n-0.210768\n-0.544082\n-0.704662\n-0.677218\n-0.107358\n-0.797465\n-0.677470\n-0.594572\n-0.044528\n0.265201\n-0.770908\n-0.054257\n0.971337\n1.000000\n-0.704692\n\n\nprice\n-0.082391\n0.203254\n0.584642\n0.690628\n0.751265\n0.135486\n0.834415\n0.872335\n0.543436\n0.082310\n0.071107\n0.810533\n-0.101649\n-0.686571\n-0.704692\n1.000000"
  },
  {
    "objectID": "posts/linear regression/linear.html#visualization-of-above-table-using-a-heatmap.",
    "href": "posts/linear regression/linear.html#visualization-of-above-table-using-a-heatmap.",
    "title": "Building a Model Using Linear Regression for Car Price Prediction and Data Analysis",
    "section": "Visualization of above table using a heatmap.",
    "text": "Visualization of above table using a heatmap.\n\n\nCode\nplt.figure(figsize=(12, 8))\nsns.heatmap(data.corr(method='pearson',numeric_only=True), cmap='Reds', annot=True)\n#print(data)\nplt.title('Correlation Matrix')\n\n\nText(0.5, 1.0, 'Correlation Matrix')\n\n\n\n\n\n\n\n\n\n\nIn the correlation matrix, we observe that features like horsepower, engine-size, curb-weight, and width have high correlations with the price, close to +1, indicating a strong positive linear relationship. On the other hand, length is highly correlated with wheel-base, suggesting that including both in the model might lead to redundant information.\nIf length and wheel-base provide overlapping information, adding both to the model may not improve its predictive power. Instead, the model might perform better with a combination of features that provide complementary information. For instance, wheel-base and bore might together explain different aspects of price variation that length does not capture.\nTherefore, the features horsepower, engine-size, curb-weight, width, wheel-base, and bore are chosen to build a more effective linear regression model."
  },
  {
    "objectID": "posts/linear regression/linear.html#linear-regression-using-a-single-feature",
    "href": "posts/linear regression/linear.html#linear-regression-using-a-single-feature",
    "title": "Building a Model Using Linear Regression for Car Price Prediction and Data Analysis",
    "section": "Linear Regression using a Single Feature",
    "text": "Linear Regression using a Single Feature\n\n\nCode\ndata = data.assign(price=data['price'].fillna(data['price'].mean()))\ndata = data.assign(horsepower=data['horsepower'].fillna(data['horsepower'].mean()))\ndata = data.assign(bore=data['bore'].fillna(data['bore'].mean()))\n\n# Independent variables\nX = data[['horsepower', 'engine-size','curb-weight', 'width', 'wheel-base','bore']] \n#Dependent variable\ny = data['price']           \n\n# Split the data into training and validation sets\nX_train, X_val, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n\n\nHere we can see how train and test data splited"
  },
  {
    "objectID": "posts/linear regression/linear.html#training-the-model",
    "href": "posts/linear regression/linear.html#training-the-model",
    "title": "Building a Model Using Linear Regression for Car Price Prediction and Data Analysis",
    "section": "Training the model",
    "text": "Training the model\n\n\n\nTraing the Model\n\n\n\n\nCode\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n# Make predictions on the training set\ny_train_pred = model.predict(X_train)\n\n# Make predictions on the testing set\ny_test_pred = model.predict(X_val)\n\ny_test_pred_series = pd.Series(y_test_pred, index=y_test.index)\n\n#print(y_test)\n#print(y_test_pred_series)"
  },
  {
    "objectID": "posts/linear regression/linear.html#evaluation",
    "href": "posts/linear regression/linear.html#evaluation",
    "title": "Building a Model Using Linear Regression for Car Price Prediction and Data Analysis",
    "section": "Evaluation",
    "text": "Evaluation\n\n\nCode\n# Calculate Mean Squared Error\ntrain_mse = mean_squared_error(y_train, y_train_pred)\ntest_mse = mean_squared_error(y_test, y_test_pred)\n\n# Calculate Mean Absolute Error\ntrain_mae = mean_absolute_error(y_train, y_train_pred)\ntest_mae = mean_absolute_error(y_test, y_test_pred)\n\n# Calculate R² Score\ntrain_r2 = r2_score(y_train, y_train_pred)\ntest_r2 = r2_score(y_test, y_test_pred)\n\nprint(f\"Training MSE: {train_mse}\")\nprint(f\"Testing MSE: {test_mse}\")\n\n\nTraining MSE: 13294997.434275284\nTesting MSE: 15211446.60565294\n\n\n\n\nCode\nprint(f\"Training MAE: {train_mae}\")\nprint(f\"Testing MAE: {test_mae}\")\n\n\nTraining MAE: 2422.7614602035196\nTesting MAE: 2719.9431238534353\n\n\n\n\nCode\nprint(f\"Training R²: {train_r2}\")\nprint(f\"Testing R²: {test_r2}\")\n\n\nTraining R²: 0.7687942097124424\nTesting R²: 0.8049116113376993"
  },
  {
    "objectID": "posts/linear regression/linear.html#ploting",
    "href": "posts/linear regression/linear.html#ploting",
    "title": "Building a Model Using Linear Regression for Car Price Prediction and Data Analysis",
    "section": "Ploting",
    "text": "Ploting\n\n\nCode\n# Plotting\n\nplt.figure(figsize=(8,6))\n# Plot training data and regression line\nplt.scatter(y_train_pred, y_train,  color='blue', edgecolor='w', alpha=0.6, label='Predicted Training Data')\nplt.plot([min(y_train), max(y_train)], [min(y_train), max(y_train)], color='red', linestyle='--', label='Perfect Fit Line')\n\n# Add title and labels\nplt.title('Training Data vs. Predictions')\nplt.xlabel('Predicted Price')\nplt.ylabel('Actual Price')\nplt.legend()\nplt.show()\n\nplt.figure(figsize=(8,6))\n# Plot training data and regression line\nplt.scatter(y_test_pred, y_test,  color='blue', edgecolor='w', alpha=0.6, label='Predicted Test Data')\nplt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--', label='Perfect Fit Line')\n# Add title and labels\nplt.title('Test Data vs. Predictions')\nplt.xlabel('Predicted Price')\nplt.ylabel('Actual Price')\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing the statsmodels library to find the coefficients, standard errors, t-statistics, and p-values\n\n\nCode\nX = sm.add_constant(X)\n\n# Fit the model\nmodel = sm.OLS(y, X).fit()\n\n# Print the summary\nprint(model.summary())\n\n\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                  price   R-squared:                       0.779\nModel:                            OLS   Adj. R-squared:                  0.772\nMethod:                 Least Squares   F-statistic:                     116.3\nDate:                Tue, 27 Aug 2024   Prob (F-statistic):           3.92e-62\nTime:                        12:55:53   Log-Likelihood:                -1974.7\nNo. Observations:                 205   AIC:                             3963.\nDf Residuals:                     198   BIC:                             3987.\nDf Model:                           6                                         \nCovariance Type:            nonrobust                                         \n===============================================================================\n                  coef    std err          t      P&gt;|t|      [0.025      0.975]\n-------------------------------------------------------------------------------\nconst       -2.489e+04   1.44e+04     -1.724      0.086   -5.34e+04    3581.183\nhorsepower     32.9611     13.982      2.357      0.019       5.389      60.534\nengine-size    97.3789     13.822      7.045      0.000      70.123     124.635\ncurb-weight     3.0629      1.579      1.939      0.054      -0.052       6.177\nwidth         175.5085    275.708      0.637      0.525    -368.192     719.209\nwheel-base     80.4906     93.642      0.860      0.391    -104.172     265.153\nbore        -1515.2777   1301.364     -1.164      0.246   -4081.591    1051.035\n==============================================================================\nOmnibus:                       31.978   Durbin-Watson:                   1.024\nProb(Omnibus):                  0.000   Jarque-Bera (JB):              122.707\nSkew:                           0.511   Prob(JB):                     2.26e-27\nKurtosis:                       6.650   Cond. No.                     1.44e+05\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n[2] The condition number is large, 1.44e+05. This might indicate that there are\nstrong multicollinearity or other numerical problems."
  },
  {
    "objectID": "about.html#about-me",
    "href": "about.html#about-me",
    "title": "About",
    "section": "",
    "text": "Welcome to my blog! Here, I explore a variety of topics related to data science and software development. From detailed tutorials on linear regression and data visualization to insights on using Python libraries like pandas and scikit-learn, my goal is to provide valuable resources for both newcomers and seasoned professionals in the field.\nI also share updates and findings from my projects, including practical applications and lessons learned. Whether you’re here to enhance your skills or stay informed about the latest trends, you’ll find content designed to educate and inspire.\nThank you for visiting, and I hope you find the information here both useful and engaging!"
  }
]