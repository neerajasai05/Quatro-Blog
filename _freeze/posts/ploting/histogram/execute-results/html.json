{
  "hash": "eb77c85c614a5885e34c88eb60b42d18",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Ploting\"\nformat:       \n   html:\n      code-fold: true\njupyter: python3\n\n---\n\n## Main Code\nCode\n\n::: {#446b43ce .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('iris.data', delimiter=',', engine='python' )\ndata.to_excel('iris.xlsx', index=False)\n    #print(data)\n\ndef statistics(data):\n        numeric_columns = data.select_dtypes(include=['number']).columns\n        #print(numeric_columns)\n        mean_value = data.mean(numeric_only= True)\n        median_value = data.median(numeric_only= True)\n        mode_value = data.mode().iloc[0]         \n        # Using f-strings to format the output\n        print(f\"Mean value for each column: \\n{mean_value}\")\n        print(\"---------------------\")\n        print(f\"Median value for each column: \\n{median_value}\")\n        print('---------------------')\n        print(f\"Mode value for each column: \\n{mode_value}\")     \n        for column in numeric_columns:\n            total_sum = data[column].sum()     \n            std_value = data[column].std()     \n            count_value = data[column].count()\n            max_value = data[column].max()\n            min_value = data[column].min()\n            print(\"-----------------\")\n            print(f\"Total sum of '{column}': {total_sum}\")\n            print(f\"Standard Deviation of '{column}': {std_value}\")\n            print(f\"Count value of '{column}': {count_value}\")\n            print(f\"Max Value of '{column}': {max_value}\")\n            print(f\"Min Value of '{column}': {min_value}\")\n        return mean_value, median_value, mode_value\n\nmean_value, median_value, mode_value = statistics(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMean value for each column: \nsepal length    5.843333\nsepal width     3.054000\npetal length    3.758667\npetal width     1.198667\ndtype: float64\n---------------------\nMedian value for each column: \nsepal length    5.80\nsepal width     3.00\npetal length    4.35\npetal width     1.30\ndtype: float64\n---------------------\nMode value for each column: \nsepal length            5.0\nsepal width             3.0\npetal length            1.5\npetal width             0.2\nclass           Iris-setosa\nName: 0, dtype: object\n-----------------\nTotal sum of 'sepal length': 876.5\nStandard Deviation of 'sepal length': 0.828066127977863\nCount value of 'sepal length': 150\nMax Value of 'sepal length': 7.9\nMin Value of 'sepal length': 4.3\n-----------------\nTotal sum of 'sepal width': 458.1\nStandard Deviation of 'sepal width': 0.4335943113621737\nCount value of 'sepal width': 150\nMax Value of 'sepal width': 4.4\nMin Value of 'sepal width': 2.0\n-----------------\nTotal sum of 'petal length': 563.8\nStandard Deviation of 'petal length': 1.7644204199522626\nCount value of 'petal length': 150\nMax Value of 'petal length': 6.9\nMin Value of 'petal length': 1.0\n-----------------\nTotal sum of 'petal width': 179.8\nStandard Deviation of 'petal width': 0.7631607417008411\nCount value of 'petal width': 150\nMax Value of 'petal width': 2.5\nMin Value of 'petal width': 0.1\n```\n:::\n:::\n\n\n## Histogram Plot\nCode\n\n::: {#1f60232d .cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('iris.data', delimiter=',', engine='python' )\ndata.to_excel('iris.xlsx', index=False)\n    #print(data)\n\ndef histogram_plot(data):\n        # Select only numeric columns\n        numeric_columns = data.select_dtypes(include=['number']).columns\n        #print(numeric_columns)\n    \n        # Plot histogram for each numeric column\n        for column in numeric_columns:\n        #creates a new figure for the plot. Each time through the loop, a new figure is created to ensure that each histogram is plotted in its own separate window or plot.\n                plt.figure(figsize=(6, 4))\n                data[column].plot(kind='hist', bins=20, edgecolor='black')\n                plt.xlabel(column)\n                plt.ylabel('Frequency')\n                plt.title(f'Histogram of {column}')\n                plt.show()\n\nhistogram_plot(data)\n```\n\n::: {.cell-output .cell-output-display}\n![](histogram_files/figure-html/cell-3-output-1.png){width=512 height=376}\n:::\n\n::: {.cell-output .cell-output-display}\n![](histogram_files/figure-html/cell-3-output-2.png){width=517 height=376}\n:::\n\n::: {.cell-output .cell-output-display}\n![](histogram_files/figure-html/cell-3-output-3.png){width=510 height=376}\n:::\n\n::: {.cell-output .cell-output-display}\n![](histogram_files/figure-html/cell-3-output-4.png){width=510 height=376}\n:::\n:::\n\n\n## Scatter Plot\nCode\n\n::: {#79327c6f .cell execution_count=3}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('iris.data', delimiter=',', engine='python' )\ndata.to_excel('iris.xlsx', index=False)\n    #print(data)\n\ndef scatter_plot(data):\n    # Select only numeric columns\n    numeric_columns = data.select_dtypes(include=['number']).columns\n    colors = ['g','r']\n    # Create a color map\n    color_map = [colors[i % len(colors)] for i in range(len(data))]\n    for column1 in numeric_columns:\n        for column2 in numeric_columns:\n                if column1 != column2:\n                    plt.figure(figsize=(6, 4))\n                    plt.scatter(data[column1], data[column2], c=color_map, label='Data Points')\n                    plt.title(f\"Scatter Plot of: {column1} and {column2}\")\n                    plt.xlabel(column1)\n                    plt.ylabel(column2)\n                    plt.legend()\n                    plt.grid(True)\n                    plt.show()\n\nscatter_plot(data)\n```\n\n::: {.cell-output .cell-output-display}\n![](histogram_files/figure-html/cell-4-output-1.png){width=516 height=376}\n:::\n\n::: {.cell-output .cell-output-display}\n![](histogram_files/figure-html/cell-4-output-2.png){width=503 height=376}\n:::\n\n::: {.cell-output .cell-output-display}\n![](histogram_files/figure-html/cell-4-output-3.png){width=516 height=376}\n:::\n\n::: {.cell-output .cell-output-display}\n![](histogram_files/figure-html/cell-4-output-4.png){width=522 height=376}\n:::\n\n::: {.cell-output .cell-output-display}\n![](histogram_files/figure-html/cell-4-output-5.png){width=509 height=376}\n:::\n\n::: {.cell-output .cell-output-display}\n![](histogram_files/figure-html/cell-4-output-6.png){width=522 height=376}\n:::\n\n::: {.cell-output .cell-output-display}\n![](histogram_files/figure-html/cell-4-output-7.png){width=515 height=376}\n:::\n\n::: {.cell-output .cell-output-display}\n![](histogram_files/figure-html/cell-4-output-8.png){width=515 height=376}\n:::\n\n::: {.cell-output .cell-output-display}\n![](histogram_files/figure-html/cell-4-output-9.png){width=515 height=376}\n:::\n\n::: {.cell-output .cell-output-display}\n![](histogram_files/figure-html/cell-4-output-10.png){width=515 height=376}\n:::\n\n::: {.cell-output .cell-output-display}\n![](histogram_files/figure-html/cell-4-output-11.png){width=515 height=376}\n:::\n\n::: {.cell-output .cell-output-display}\n![](histogram_files/figure-html/cell-4-output-12.png){width=502 height=376}\n:::\n:::\n\n\n## Line Plot\nCode\n\n::: {#401062e9 .cell execution_count=4}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('iris.data', delimiter=',', engine='python' )\ndata.to_excel('iris.xlsx', index=False)\n    #print(data)\n\ndef line_plot(data):\n    # Select only numeric columns\n    numeric_columns = data.select_dtypes(include=['number']).columns\n    # Plot histogram for each numeric column\n    for column in numeric_columns:\n        plt.figure(figsize=(6, 4))\n        numeric_data = data.select_dtypes(include='number')\n        #print(numeric_data) numeric_data.index,\n        plt.plot(numeric_data[column], color='green' , label=column, linestyle='-', marker='o')\n        plt.title('Line Plot')\n        plt.xlabel('Index')\n        plt.ylabel(column)\n        plt.legend()\n        plt.grid(True)\n        plt.show()\n\nline_plot(data)\n```\n\n::: {.cell-output .cell-output-display}\n![](histogram_files/figure-html/cell-5-output-1.png){width=515 height=376}\n:::\n\n::: {.cell-output .cell-output-display}\n![](histogram_files/figure-html/cell-5-output-2.png){width=515 height=376}\n:::\n\n::: {.cell-output .cell-output-display}\n![](histogram_files/figure-html/cell-5-output-3.png){width=502 height=376}\n:::\n\n::: {.cell-output .cell-output-display}\n![](histogram_files/figure-html/cell-5-output-4.png){width=515 height=376}\n:::\n:::\n\n\n## Box Plot\nCode\n\n::: {#14015e1d .cell execution_count=5}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport nbformat\n\n\ndata = pd.read_csv('iris.data', delimiter=',', engine='python' )\ndata.to_excel('iris.xlsx', index=False)\n    #print(data)\n\ndef box_plot(data):\n    # Select only numeric columns\n    numeric_columns = data.select_dtypes(include=['number']).columns\n    # Plot histogram for each numeric column\n    numeric_data = data.select_dtypes(include='number')\n    #print(numeric_data)\n    for column in numeric_columns:\n        plt.figure(figsize=(6, 4))\n        plt.boxplot(numeric_data[column])   #, tick_labels=numeric_columns\n        plt.title('Box Plot')\n        plt.xlabel(column)\n        plt.ylabel('Values')\n        plt.grid()\n        plt.show()\n\nbox_plot(data)\n```\n\n::: {.cell-output .cell-output-display}\n![](histogram_files/figure-html/cell-6-output-1.png){width=515 height=376}\n:::\n\n::: {.cell-output .cell-output-display}\n![](histogram_files/figure-html/cell-6-output-2.png){width=515 height=376}\n:::\n\n::: {.cell-output .cell-output-display}\n![](histogram_files/figure-html/cell-6-output-3.png){width=502 height=376}\n:::\n\n::: {.cell-output .cell-output-display}\n![](histogram_files/figure-html/cell-6-output-4.png){width=515 height=376}\n:::\n:::\n\n\n",
    "supporting": [
      "histogram_files"
    ],
    "filters": [],
    "includes": {}
  }
}