---
title: "Report on Wine Data"
author: "Neeraja Sai Magisetti"
date: "2024-07-16"
categories: [code, analysis]
format:       
   html:
      code-fold: true
jupyter: python3
image: "wine.png"

---
# Image of Wine 
![**Wine**](wine.png){width="500"}

## About Wine data
The Wine data consists of measurements of various chemical properties of different types of wine. It is organized in a tabular format with multiple columns, each representing a specific property, and rows representing different wine samples. 

## Data Structure
**Columns in wine data:**

**class:** Class label (1, 2, or 3) representing different types of wine.<br>
Alcohol<br>
Malicacid<br>
Ash<br>
Alcalinity_of_ash<br>
Magnesium<br>
Total_phenols<br>
Flavanoids<br>
Nonflavanoid_phenols<br>
Proanthocyanins<br>
Color_intensity<br>
Hue<br>
0D280_0D315_of_diluted_wines<br>
Proline<br>

## Descriptive Statistics
Descriptive Statistics for wine data set


```{python}
import pandas as pd
import matplotlib.pyplot as plt
import nbformat


data = pd.read_csv('wine.data', delimiter=',', engine='python' )
data.to_excel('wine.xlsx', index=False)
columns = data.columns[data.columns != 'class']    
grpdata = data.groupby(["class"])

def statistics(data):
        #numeric_columns = data.select_dtypes(include=['number']).columns
        #print(numeric_columns)
        mean_value = grpdata.mean(numeric_only= True)
        median_value = grpdata.median(numeric_only= True)
        mode_value = grpdata.apply(lambda x: x.mode().iloc[0] if not x.mode().empty else None, include_groups=False)
        #mode_value = grpdata.mode().iloc[0]         
        # Using f-strings to format the output
        print(f"Mean value for each column: \n{mean_value}")
        print("==========================================================")
        print(f"Median value for each column: \n{median_value}")
        print('===========================================================')
        print(f"Mode value for each column: \n{mode_value}")     
        for column in columns:
            total_sum = grpdata[column].sum()     
            std_value = grpdata[column].std()     
            count_value = grpdata[column].count()
            max_value = grpdata[column].max()
            min_value = grpdata[column].min()
            print("=========================================================")
            print(f"Total sum of '{column}': {total_sum}")
            print(f"Standard Deviation of '{column}': {std_value}")
            print(f"Count value of '{column}': {count_value}")
            print(f"Max Value of '{column}': {max_value}")
            print(f"Min Value of '{column}': {min_value}")
        return mean_value, median_value, mode_value

mean_value, median_value, mode_value = statistics(data)

```


## Histogram Plot
Histogram plot for wine data set

```{python}
import pandas as pd
import matplotlib.pyplot as plt
import nbformat

data = pd.read_csv('wine.data', delimiter=',', engine='python' )
data.to_excel('wine.xlsx', index=False)
columns = data.columns[data.columns != 'class']    
grpdata = data.groupby(["class"])
#numeric_columns = data.select_dtypes(include=['number'])
#print(numeric_columns)


def histogram_plot(data):
        # Plot histogram for each numeric column
            for column in columns:
                for name, group in grpdata:
                    plt.figure(figsize=(6,4))
                    class_name = name if isinstance(name, str) else name[0]
                    print("class" , class_name)
                    plt.hist(group[column], bins=80, alpha=0.7, label=column)
                    plt.xlabel(column)
                    plt.ylabel('Frequency')
                    plt.title(f'Histogram of {column}')
                    plt.show()

# Call the function with the data
histogram_plot(data)
```

## Scatter Plot
Scatter plot for iris data set

```{python}
import pandas as pd
import matplotlib.pyplot as plt
import nbformat


data = pd.read_csv('wine.data', delimiter=',', engine='python' )
data.to_excel('wine.xlsx', index=False)
columns = data.columns[data.columns != 'class']    
grpdata = data.groupby(["class"])
    #print(data)

def scatter_plot(data):
    colors = ['r', 'g', 'b']  # Define more colors if there are more than 2 classes

    for column1 in columns:
        for column2 in columns:
            if column1 != column2:
                plt.figure(figsize=(7,7))  # Create a larger figure for better visualization
                for name, group in grpdata:
                    color_map = colors[:len(grpdata)]
                    plt.scatter(group[column1], group[column2], label=f' "class"{name}')
                plt.title(f"Scatter Plot of {column1} and {column2}")
                plt.xlabel(column1)
                plt.ylabel(column2)
                plt.legend()
                plt.grid(True)
                plt.show()


scatter_plot(data)

```

## Line Plot
Line plot for wine data set

```{python}
import pandas as pd
import matplotlib.pyplot as plt
import nbformat


data = pd.read_csv('wine.data', delimiter=',', engine='python' )
data.to_excel('wine.xlsx', index=False)
columns = data.columns[data.columns != 'class']    
grpdata = data.groupby(["class"])
    #print(data)

def line_plot(data):
    # Select only numeric columns
    #numeric_columns = data.select_dtypes(include=['number']).columns
    # Plot histogram for each numeric column
    for name, group in grpdata:
        class_name = name if isinstance(name, str) else name[0]
        print("class", class_name)
        for column in columns:
                plt.figure(figsize=(6, 4))
                plt.plot(group.index, group[column], color='green' , label=column, linestyle='-', marker='o')
                plt.title('Line Plot')
                plt.xlabel('Index')
                plt.ylabel(column)
                plt.legend()
                plt.grid(True)
                plt.show()

line_plot(data)

```

## Box Plot
Box plot for iris data set

```{python}
import pandas as pd
import matplotlib.pyplot as plt
import nbformat


data = pd.read_csv('wine.data', delimiter=',', engine='python' )
data.to_excel('wine.xlsx', index=False)
columns = data.columns[data.columns != 'class']    
grpdata = data.groupby(["class"])
    #print(data)

def box_plot(data):
    for name, group in grpdata:
        class_name = name if isinstance(name, str) else name[0]
        print("class" , class_name)
        for column in columns:
            plt.figure(figsize=(6, 4))
            plt.boxplot(group[column])   #, tick_labels=numeric_columns
            plt.title('Box Plot')
            plt.xlabel(column)
            plt.ylabel('Values')
            plt.grid()
            plt.show()

box_plot(data)
```